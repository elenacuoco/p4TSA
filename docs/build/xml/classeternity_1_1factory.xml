<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classeternity_1_1factory" kind="class" language="C++" prot="public">
    <compoundname>eternity::factory</compoundname>
    <basecompoundref refid="classeternity_1_1_ifactory" prot="public" virt="non-virtual">eternity::Ifactory</basecompoundref>
    <includes refid="dynamic_8hpp" local="no">dynamic.hpp</includes>
    <templateparamlist>
      <param>
        <type>class t</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classeternity_1_1factory_1abf647d721a959e2a9728ff79b2bf094d" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string eternity::factory&lt; t &gt;::m_sConventionalName</definition>
        <argsstring></argsstring>
        <name>m_sConventionalName</name>
        <briefdescription>
<para>An istance of the object to dynamic create. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.hpp" line="72" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classeternity_1_1factory_1a0fc6f0a6ec7ef7057f06924b948d8c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eternity::factory&lt; t &gt;::factory</definition>
        <argsstring>()</argsstring>
        <name>factory</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
<para>The default constructor that add this to the gloab list of factory&lt;t&gt; object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.hpp" line="80" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.hpp" bodystart="106" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classeternity_1_1factory_1aabaf1fee796b93628f897af8ac9c3ea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eternity::factory&lt; t &gt;::factory</definition>
        <argsstring>(std::string conventional_name)</argsstring>
        <name>factory</name>
        <param>
          <type>std::string</type>
          <declname>conventional_name</declname>
        </param>
        <briefdescription>
<para>Constructor for cross compiler compatibility. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.hpp" line="83" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.hpp" bodystart="116" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classeternity_1_1factory_1a5abc378892135b2d5491d7380752bb84" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>eternity::factory&lt; t &gt;::~factory</definition>
        <argsstring>()</argsstring>
        <name>~factory</name>
        <briefdescription>
<para>Remove this from the gloab list of factory&lt;t&gt; object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.hpp" line="86" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.hpp" bodystart="137" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classeternity_1_1factory_1a08c1c494bc749955f9b0767d31933c2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void * eternity::factory&lt; t &gt;::create</definition>
        <argsstring>(std::string &amp;class_name)</argsstring>
        <name>create</name>
        <reimplements refid="classeternity_1_1_ifactory_1afaca5a9abf52fa3a731c3dfed7cb73b3">create</reimplements>
        <param>
          <type>std::string &amp;</type>
          <declname>class_name</declname>
        </param>
        <briefdescription>
<para>create an instance from class t if the same specified in class_name </para>        </briefdescription>
        <detaileddescription>
<para>Return a pointer to a new istance of the class t (the only template parmeter of factory&lt;t&gt;) only if the string class_name is actually the name of class t. Otherwise return a NULL pointer </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.hpp" line="95" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.hpp" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classeternity_1_1factory_1a0b7c7bc194b178379eb1b880f87d3b48" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string eternity::factory&lt; t &gt;::get_conventional_name</definition>
        <argsstring>(std::string &amp;compiler_name)</argsstring>
        <name>get_conventional_name</name>
        <reimplements refid="classeternity_1_1_ifactory_1a6c2afa73d61aaa81233ab1216c508252">get_conventional_name</reimplements>
        <param>
          <type>std::string &amp;</type>
          <declname>compiler_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the conventional name of class t if typeid(t).name() match with compiler_name. Otherwise return an empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.hpp" line="101" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.hpp" bodystart="130" bodyend="134"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>factory&lt;t&gt; is responsable for the creation of object derived by the class t at run-time. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="236">
        <label>eternity::Ifactory</label>
        <link refid="classeternity_1_1_ifactory"/>
      </node>
      <node id="235">
        <label>eternity::factory&lt; t &gt;</label>
        <link refid="classeternity_1_1factory"/>
        <childnode refid="236" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="238">
        <label>eternity::Ifactory</label>
        <link refid="classeternity_1_1_ifactory"/>
        <childnode refid="238" relation="usage">
          <edgelabel>m_pHead</edgelabel>
          <edgelabel>m_pNext</edgelabel>
        </childnode>
      </node>
      <node id="237">
        <label>eternity::factory&lt; t &gt;</label>
        <link refid="classeternity_1_1factory"/>
        <childnode refid="238" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.hpp" line="70" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.hpp" bodystart="70" bodyend="103"/>
    <listofallmembers>
      <member refid="classeternity_1_1factory_1a08c1c494bc749955f9b0767d31933c2b" prot="public" virt="virtual"><scope>eternity::factory</scope><name>create</name></member>
      <member refid="classeternity_1_1factory_1a0fc6f0a6ec7ef7057f06924b948d8c94" prot="public" virt="non-virtual"><scope>eternity::factory</scope><name>factory</name></member>
      <member refid="classeternity_1_1factory_1aabaf1fee796b93628f897af8ac9c3ea9" prot="public" virt="non-virtual"><scope>eternity::factory</scope><name>factory</name></member>
      <member refid="classeternity_1_1factory_1a0b7c7bc194b178379eb1b880f87d3b48" prot="public" virt="virtual"><scope>eternity::factory</scope><name>get_conventional_name</name></member>
      <member refid="classeternity_1_1_ifactory_1a106788b385d5f378cb75bfb8f0296525" prot="public" virt="non-virtual"><scope>eternity::factory</scope><name>m_pHead</name></member>
      <member refid="classeternity_1_1_ifactory_1a6749c6d3f8aea62a3084c0825f0687c5" prot="public" virt="non-virtual"><scope>eternity::factory</scope><name>m_pNext</name></member>
      <member refid="classeternity_1_1factory_1abf647d721a959e2a9728ff79b2bf094d" prot="private" virt="non-virtual"><scope>eternity::factory</scope><name>m_sConventionalName</name></member>
      <member refid="classeternity_1_1factory_1a5abc378892135b2d5491d7380752bb84" prot="public" virt="virtual"><scope>eternity::factory</scope><name>~factory</name></member>
      <member refid="classeternity_1_1_ifactory_1a5bcc4b3255bd1030562e0e554ece0a05" prot="public" virt="virtual"><scope>eternity::factory</scope><name>~Ifactory</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

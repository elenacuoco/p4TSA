<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtsa_1_1_complex_f_f_t" kind="class" language="C++" prot="public">
    <compoundname>tsa::ComplexFFT</compoundname>
    <basecompoundref refid="classtsa_1_1_base_f_f_t" prot="public" virt="non-virtual">tsa::BaseFFT</basecompoundref>
    <includes refid="_complex_f_f_t_8hpp" local="no">ComplexFFT.hpp</includes>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classtsa_1_1_complex_f_f_t_1ada17028929521c35d3505010846a9ed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::ComplexFFT::execute</definition>
        <argsstring>(Cmatrix &amp;in, Cmatrix &amp;out)</argsstring>
        <name>execute</name>
        <param>
          <type><ref refid="namespacetsa_1a86348fef1603a135fe5fba9e5f5486ee" kindref="member">Cmatrix</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacetsa_1a86348fef1603a135fe5fba9e5f5486ee" kindref="member">Cmatrix</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <exceptions> throw (<ref refid="classtsa_1_1bad__matrix__size" kindref="compound">bad_matrix_size</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execution of the fft of a multichannel buffer of complex double precision numbers. Input data are organized in a matrix. Each row is a different channel, and the number of data to transform is equal to the number of columns. Both the number of rows and the number of columns can change between each call to this method. If the number of rows changes nothing special will happen, if the number of cols changes the plan is reevaluated with the current flags.</para><para><simplesect kind="pre"><para>The number of rows of input and output matrix must be the same. </para></simplesect>
<simplesect kind="pre"><para>The number of columns of the output matrix must be equal to the number of columns of the input matrix. </para></simplesect>
<simplesect kind="post"><para>the input buffer is unchanged, unless <ref refid="classtsa_1_1_base_f_f_t_1a5b1e2f36dbdfe197aa6c74d1cf963f40" kindref="member">SetPreserveInput</ref> was called with a false argument </para></simplesect>
<simplesect kind="post"><para>the output buffer contain the fft of the input data</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classtsa_1_1bad__matrix__size" kindref="compound">bad_matrix_size</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>the dimension of the output array is wrong</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to the input multichannel buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to the output multichannel buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ComplexFFT.hpp" line="142" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/src/ComplexFFT.cpp" bodystart="23" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_complex_f_f_t_1a05acda3ab3fbb2ead70421e587cdd210" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void tsa::ComplexFFT::MakePlan</definition>
        <argsstring>()</argsstring>
        <name>MakePlan</name>
        <reimplements refid="classtsa_1_1_base_f_f_t_1a9af0c36413173821cac8dbdce9cfe3b4">MakePlan</reimplements>
        <exceptions> throw (std::runtime_error)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make a new plan, with the current parameters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ComplexFFT.hpp" line="147" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/src/ComplexFFT.cpp" bodystart="49" bodyend="62"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Setters</header>
      <memberdef kind="function" id="classtsa_1_1_complex_f_f_t_1a3096e3de532f9433415426697f5002c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::ComplexFFT::SetSign</definition>
        <argsstring>(enum TransformSign s)</argsstring>
        <name>SetSign</name>
        <param>
          <type>enum <ref refid="classtsa_1_1_complex_f_f_t_1a4e90a372fa0610f957f2c683335aa766" kindref="member">TransformSign</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the sign of the transform</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the new sign of the transform </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ComplexFFT.hpp" line="169" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/src/ComplexFFT.cpp" bodystart="64" bodyend="78"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classtsa_1_1_complex_f_f_t_1a4e90a372fa0610f957f2c683335aa766" prot="public" static="no">
        <name>TransformSign</name>
        <enumvalue id="classtsa_1_1_complex_f_f_t_1a4e90a372fa0610f957f2c683335aa766a907b249808a0c1affb86572baa34510f" prot="public">
          <name>FORWARD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtsa_1_1_complex_f_f_t_1a4e90a372fa0610f957f2c683335aa766ab056de3bb0b051b60f40de6cb7a560de" prot="public">
          <name>BACKWARD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transform sign. See the fftw documentation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ComplexFFT.hpp" line="80" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ComplexFFT.hpp" bodystart="80" bodyend="83"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtsa_1_1_complex_f_f_t_1a97a15c1129372c7abb6ba3ba864ca065" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int tsa::ComplexFFT::mSign</definition>
        <argsstring></argsstring>
        <name>mSign</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The sign of the transform </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ComplexFFT.hpp" line="178" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ComplexFFT.hpp" bodystart="178" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtsa_1_1_complex_f_f_t_1af51dac1a455d6e943de87f1b0cf4d3d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tsa::ComplexFFT::ComplexFFT</definition>
        <argsstring>(int size=0, enum TransformSign s=FORWARD, enum FFTPlanningMode mode=ESTIMATE, bool PreserveInput=true)</argsstring>
        <name>ComplexFFT</name>
        <param>
          <type>int</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>enum <ref refid="classtsa_1_1_complex_f_f_t_1a4e90a372fa0610f957f2c683335aa766" kindref="member">TransformSign</ref></type>
          <declname>s</declname>
          <defval><ref refid="classtsa_1_1_complex_f_f_t_1a4e90a372fa0610f957f2c683335aa766a907b249808a0c1affb86572baa34510f" kindref="member">FORWARD</ref></defval>
        </param>
        <param>
          <type>enum <ref refid="namespacetsa_1a217e07ef78939f88b22c8428ac96b1ae" kindref="member">FFTPlanningMode</ref></type>
          <declname>mode</declname>
          <defval><ref refid="namespacetsa_1a217e07ef78939f88b22c8428ac96b1aea2762be66fb6f3e4772c7f4cc162b9750" kindref="member">ESTIMATE</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>PreserveInput</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the transform </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the sign of the transform </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>specify the way in which plans are calculated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PreserveInput</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the input buffer must be preserved during the transform, false otherwise </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ComplexFFT.hpp" line="94" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/src/ComplexFFT.cpp" bodystart="7" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_complex_f_f_t_1a917ecfc43a0499d90abee599755625d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tsa::ComplexFFT::ComplexFFT</definition>
        <argsstring>(const ComplexFFT &amp;from)</argsstring>
        <name>ComplexFFT</name>
        <param>
          <type>const <ref refid="classtsa_1_1_complex_f_f_t" kindref="compound">ComplexFFT</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The instance that must be copied </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ComplexFFT.hpp" line="101" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/src/ComplexFFT.cpp" bodystart="13" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_complex_f_f_t_1a80004962963b35cad0fb581040a47c0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tsa::ComplexFFT::~ComplexFFT</definition>
        <argsstring>()</argsstring>
        <name>~ComplexFFT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ComplexFFT.hpp" line="106" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/src/ComplexFFT.cpp" bodystart="19" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_complex_f_f_t_1ae644ce76d2adce323c4244f65735d987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtsa_1_1_complex_f_f_t" kindref="compound">ComplexFFT</ref> &amp;</type>
        <definition>ComplexFFT&amp; tsa::ComplexFFT::operator=</definition>
        <argsstring>(const ComplexFFT &amp;from)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classtsa_1_1_complex_f_f_t" kindref="compound">ComplexFFT</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assignement operator</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The instance to be assigned from</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to a new object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ComplexFFT.hpp" line="115" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Multichannel complex FFT. </para>    </briefdescription>
    <detaileddescription>
<para>This is the implementation of the FFT of a complex multichannel buffer. The transformation is simply iterated over all the channels. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="186">
        <label>tsa::ComplexFFT</label>
        <link refid="classtsa_1_1_complex_f_f_t"/>
        <childnode refid="187" relation="public-inheritance">
        </childnode>
      </node>
      <node id="187">
        <label>tsa::BaseFFT</label>
        <link refid="classtsa_1_1_base_f_f_t"/>
        <childnode refid="188" relation="public-inheritance">
        </childnode>
      </node>
      <node id="188">
        <label>tsa::AlgoBase</label>
        <link refid="classtsa_1_1_algo_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="189">
        <label>tsa::ComplexFFT</label>
        <link refid="classtsa_1_1_complex_f_f_t"/>
        <childnode refid="190" relation="public-inheritance">
        </childnode>
      </node>
      <node id="190">
        <label>tsa::BaseFFT</label>
        <link refid="classtsa_1_1_base_f_f_t"/>
        <childnode refid="191" relation="public-inheritance">
        </childnode>
      </node>
      <node id="191">
        <label>tsa::AlgoBase</label>
        <link refid="classtsa_1_1_algo_base"/>
      </node>
    </collaborationgraph>
    <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ComplexFFT.hpp" line="73" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ComplexFFT.hpp" bodystart="73" bodyend="181"/>
    <listofallmembers>
      <member refid="classtsa_1_1_complex_f_f_t_1a4e90a372fa0610f957f2c683335aa766ab056de3bb0b051b60f40de6cb7a560de" prot="public" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>BACKWARD</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a724f59f3f5bded31174373eac81e67ee" prot="public" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>BaseFFT</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a84fa441e825a8e375f9721263d358ac8" prot="public" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>BaseFFT</name></member>
      <member refid="classtsa_1_1_complex_f_f_t_1af51dac1a455d6e943de87f1b0cf4d3d7" prot="public" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>ComplexFFT</name></member>
      <member refid="classtsa_1_1_complex_f_f_t_1a917ecfc43a0499d90abee599755625d7" prot="public" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>ComplexFFT</name></member>
      <member refid="classtsa_1_1_complex_f_f_t_1ada17028929521c35d3505010846a9ed5" prot="public" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>execute</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a7069819e421ad4cb2a4c58f65c8540ea" prot="public" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>ForgetWisdom</name></member>
      <member refid="classtsa_1_1_complex_f_f_t_1a4e90a372fa0610f957f2c683335aa766a907b249808a0c1affb86572baa34510f" prot="public" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>FORWARD</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a53ccc1ae425bb9f91adbd5562ecb9131" prot="public" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>LoadWisdomFromFile</name></member>
      <member refid="classtsa_1_1_complex_f_f_t_1a05acda3ab3fbb2ead70421e587cdd210" prot="public" virt="virtual"><scope>tsa::ComplexFFT</scope><name>MakePlan</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a171c71011fea314f23633b1816771d98" prot="protected" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>mLogicalSize</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a5c7dd6dee349547018d493be6d5874eb" prot="protected" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>mPlan</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1aa89fef1777c6df148cdb8533265b6163" prot="protected" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>mPlanNeedsUpdate</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a2fe7f53db024bb408beeb5e22eaefbb9" prot="protected" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>mPlanningRestriction</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1abbd656cda5a7cb6a88fc5d556d3269f7" prot="protected" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>mPlanningRigor</name></member>
      <member refid="classtsa_1_1_complex_f_f_t_1a97a15c1129372c7abb6ba3ba864ca065" prot="private" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>mSign</name></member>
      <member refid="classtsa_1_1_complex_f_f_t_1ae644ce76d2adce323c4244f65735d987" prot="public" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>operator=</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a1f5332f508749018f0c6a58c9b1ed9dc" prot="public" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>SaveWisdomOnFile</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a4a8b00feb20dc3ace768d3c851143a03" prot="public" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>SetPlanningMode</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a5b1e2f36dbdfe197aa6c74d1cf963f40" prot="public" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>SetPreserveInput</name></member>
      <member refid="classtsa_1_1_complex_f_f_t_1a3096e3de532f9433415426697f5002c2" prot="public" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>SetSign</name></member>
      <member refid="classtsa_1_1_complex_f_f_t_1a4e90a372fa0610f957f2c683335aa766" prot="public" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>TransformSign</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1ad73b78693c83ef6c7e07701965ae8cb6" prot="public" virt="virtual"><scope>tsa::ComplexFFT</scope><name>~BaseFFT</name></member>
      <member refid="classtsa_1_1_complex_f_f_t_1a80004962963b35cad0fb581040a47c0d" prot="public" virt="non-virtual"><scope>tsa::ComplexFFT</scope><name>~ComplexFFT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

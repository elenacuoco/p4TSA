<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="fparser_8cpp" kind="file" language="C++">
    <compoundname>fparser.cpp</compoundname>
    <includes refid="fparser_8hpp" local="yes">fparser.hpp</includes>
    <includes refid="fpconfig_8hpp" local="yes">fpconfig.hpp</includes>
    <includes refid="fptypes_8hpp" local="yes">fptypes.hpp</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">cstring</includes>
    <includes local="no">cctype</includes>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="5457">
        <label>cmath</label>
      </node>
      <node id="5449">
        <label>string</label>
      </node>
      <node id="5450">
        <label>map</label>
      </node>
      <node id="5447">
        <label>/home/filip/PhD/WDFPipe_test/p4TSA/src/fparser.cpp</label>
        <link refid="fparser_8cpp"/>
        <childnode refid="5448" relation="include">
        </childnode>
        <childnode refid="5452" relation="include">
        </childnode>
        <childnode refid="5453" relation="include">
        </childnode>
        <childnode refid="5454" relation="include">
        </childnode>
        <childnode refid="5455" relation="include">
        </childnode>
        <childnode refid="5456" relation="include">
        </childnode>
        <childnode refid="5457" relation="include">
        </childnode>
      </node>
      <node id="5448">
        <label>fparser.hpp</label>
        <link refid="fparser_8hpp"/>
        <childnode refid="5449" relation="include">
        </childnode>
        <childnode refid="5450" relation="include">
        </childnode>
        <childnode refid="5451" relation="include">
        </childnode>
      </node>
      <node id="5453">
        <label>fptypes.hpp</label>
        <link refid="fptypes_8hpp"/>
      </node>
      <node id="5452">
        <label>fpconfig.hpp</label>
        <link refid="fpconfig_8hpp"/>
      </node>
      <node id="5451">
        <label>vector</label>
      </node>
      <node id="5454">
        <label>cstdlib</label>
      </node>
      <node id="5456">
        <label>cctype</label>
      </node>
      <node id="5455">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="fparser_8cpp_1ae71449b1cc6e6250b91f539153a7a0d3" prot="public" static="no">
        <name>M_PI</name>
        <initializer>3.1415926535897932384626433832795</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/src/fparser.cpp" line="18" column="9" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/src/fparser.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//==============================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Function<sp/>parser<sp/>v2.8<sp/>by<sp/>Warp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//==============================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fparser_8hpp" kindref="compound">fparser.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fpconfig_8hpp" kindref="compound">fpconfig.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fptypes_8hpp" kindref="compound">fptypes.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s" kindref="compound">FUNCTIONPARSERTYPES</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>M_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="fparser_8cpp_1ae71449b1cc6e6250b91f539153a7a0d3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>M_PI<sp/>3.1415926535897932384626433832795</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>FUNC_AMOUNT<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1ae97b87cd905b84d3808b4268dcbf38cb" kindref="member">Functions</ref>)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1ae97b87cd905b84d3808b4268dcbf38cb" kindref="member">Functions</ref>[0]);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BCB4<sp/>does<sp/>not<sp/>implement<sp/>the<sp/>standard<sp/>lower_bound<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>used<sp/>instead:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition" kindref="compound">FuncDefinition</ref>*<sp/>fp_lower_bound(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition" kindref="compound">FuncDefinition</ref>*<sp/>first,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition" kindref="compound">FuncDefinition</ref>*<sp/>last,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition" kindref="compound">FuncDefinition</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(first<sp/>&lt;<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition" kindref="compound">FuncDefinition</ref>*<sp/>middle<sp/>=<sp/>first<sp/>+<sp/>(last<sp/>-<sp/>first)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*middle<sp/>&lt;<sp/>value)<sp/>first<sp/>=<sp/>middle<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>last<sp/>=<sp/>middle;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>last;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>FuncDefinition<sp/>instance<sp/>which<sp/>&apos;name&apos;<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>as<sp/>the<sp/>one<sp/>given<sp/>by<sp/>&apos;F&apos;.<sp/>If<sp/>no<sp/>such<sp/>function<sp/>name<sp/>exists,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition" kindref="compound">FuncDefinition</ref>*<sp/>FindFunction(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>F)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition" kindref="compound">FuncDefinition</ref><sp/>func<sp/>=<sp/>{F,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isalnum(F[func.<ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition_1a983fcca7d404cf18feeadf590ea2f01a" kindref="member">nameLength</ref>]))<sp/>++func.<ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition_1a983fcca7d404cf18feeadf590ea2f01a" kindref="member">nameLength</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func.<ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition_1a983fcca7d404cf18feeadf590ea2f01a" kindref="member">nameLength</ref>)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition" kindref="compound">FuncDefinition</ref>*<sp/>found<sp/>=</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp_lower_bound(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1ae97b87cd905b84d3808b4268dcbf38cb" kindref="member">Functions</ref>,<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1ae97b87cd905b84d3808b4268dcbf38cb" kindref="member">Functions</ref><sp/>+<sp/>FUNC_AMOUNT,<sp/>func);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found<sp/>==<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1ae97b87cd905b84d3808b4268dcbf38cb" kindref="member">Functions</ref><sp/>+<sp/>FUNC_AMOUNT<sp/>||<sp/>func<sp/>&lt;<sp/>*found)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>found;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copy-on-write<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="class_function_parser_1a0af0f9ad348adf7df57fa630eddf8e47" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a0af0f9ad348adf7df57fa630eddf8e47" kindref="member">FunctionParser::copyOnWrite</ref>()<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;referenceCounter<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_function_parser_1_1_data" kindref="compound">Data</ref>*<sp/>oldData<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_function_parser_1_1_data" kindref="compound">Data</ref>(*oldData);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--(oldData-&gt;<ref refid="struct_function_parser_1_1_data_1a73a9146066451148d4ec8fe8c0ec8418" kindref="member">referenceCounter</ref>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;referenceCounter<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructors<sp/>and<sp/>destructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//===========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="class_function_parser_1a18468eeb56ac5c1b1a6a0b0cebb2c045" refkind="member"><highlight class="normal"><ref refid="class_function_parser_1a18468eeb56ac5c1b1a6a0b0cebb2c045" kindref="member">FunctionParser::FunctionParser</ref>()<sp/>:</highlight></codeline>
<codeline lineno="79"><highlight class="normal">parseErrorType(FP_NO_ERROR),<sp/>evalErrorType(0),</highlight></codeline>
<codeline lineno="80"><highlight class="normal">data(new<sp/><ref refid="struct_function_parser_1_1_data" kindref="compound">Data</ref>),</highlight></codeline>
<codeline lineno="81"><highlight class="normal">evalRecursionLevel(0)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a73a9146066451148d4ec8fe8c0ec8418" kindref="member">referenceCounter</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="class_function_parser_1a50257dda6ec4f2c4adf6740e31cf7da7" refkind="member"><highlight class="normal"><ref refid="class_function_parser_1a50257dda6ec4f2c4adf6740e31cf7da7" kindref="member">FunctionParser::~FunctionParser</ref>()<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a73a9146066451148d4ec8fe8c0ec8418" kindref="member">referenceCounter</ref>)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="class_function_parser_1adcfa2c887c17019c29fdbfaa39ab28fb" refkind="member"><highlight class="normal"><ref refid="class_function_parser_1a18468eeb56ac5c1b1a6a0b0cebb2c045" kindref="member">FunctionParser::FunctionParser</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_function_parser" kindref="compound">FunctionParser</ref>&amp;<sp/>cpy)<sp/>:</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref>(cpy.<ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref>),</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref>(cpy.<ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref>),</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>(cpy.<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>),</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="class_function_parser_1a5b75f74ce82219fc4aaf05665ab46034" kindref="member">evalRecursionLevel</ref>(0)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>++(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a73a9146066451148d4ec8fe8c0ec8418" kindref="member">referenceCounter</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="class_function_parser_1a316870fce14d0b1d9bc386f23115cc53" refkind="member"><highlight class="normal"><ref refid="class_function_parser" kindref="compound">FunctionParser</ref>&amp;<sp/><ref refid="class_function_parser_1a316870fce14d0b1d9bc386f23115cc53" kindref="member">FunctionParser::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_function_parser" kindref="compound">FunctionParser</ref>&amp;<sp/>cpy)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref><sp/>!=<sp/>cpy.<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a73a9146066451148d4ec8fe8c0ec8418" kindref="member">referenceCounter</ref>)<sp/>==<sp/>0)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/>cpy.<ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref><sp/>=<sp/>cpy.<ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref><sp/>=<sp/>cpy.<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a5b75f74ce82219fc4aaf05665ab46034" kindref="member">evalRecursionLevel</ref><sp/>=<sp/>cpy.<ref refid="class_function_parser_1a5b75f74ce82219fc4aaf05665ab46034" kindref="member">evalRecursionLevel</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a73a9146066451148d4ec8fe8c0ec8418" kindref="member">referenceCounter</ref>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="struct_function_parser_1_1_data_1a2f7002e4cc588de6091472be924689b0" refkind="member"><highlight class="normal"><ref refid="struct_function_parser_1_1_data_1a2f7002e4cc588de6091472be924689b0" kindref="member">FunctionParser::Data::Data</ref>()<sp/>:</highlight></codeline>
<codeline lineno="115"><highlight class="normal">useDegreeConversion(false),</highlight></codeline>
<codeline lineno="116"><highlight class="normal">ByteCode(0),<sp/>ByteCodeSize(0),</highlight></codeline>
<codeline lineno="117"><highlight class="normal">Immed(0),<sp/>ImmedSize(0),</highlight></codeline>
<codeline lineno="118"><highlight class="normal">Stack(0),<sp/>StackSize(0)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="struct_function_parser_1_1_data_1a1091c2cf47cbd047273335f913bb2f82" refkind="member"><highlight class="normal"><ref refid="struct_function_parser_1_1_data_1a1091c2cf47cbd047273335f913bb2f82" kindref="member">FunctionParser::Data::~Data</ref>()<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_function_parser_1_1_data_1a113be528db3c02713aa9887732897f8d" kindref="member">ByteCode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="struct_function_parser_1_1_data_1a113be528db3c02713aa9887732897f8d" kindref="member">ByteCode</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_function_parser_1_1_data_1a113be528db3c02713aa9887732897f8d" kindref="member">ByteCode</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_function_parser_1_1_data_1a5a1b2b3c4adaed1b098413547cc67ce3" kindref="member">Immed</ref>)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="struct_function_parser_1_1_data_1a5a1b2b3c4adaed1b098413547cc67ce3" kindref="member">Immed</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_function_parser_1_1_data_1a5a1b2b3c4adaed1b098413547cc67ce3" kindref="member">Immed</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_function_parser_1_1_data_1a1ba27ea1afffc0f361e4da36723caaa7" kindref="member">Stack</ref>)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="struct_function_parser_1_1_data_1a1ba27ea1afffc0f361e4da36723caaa7" kindref="member">Stack</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_function_parser_1_1_data_1a1ba27ea1afffc0f361e4da36723caaa7" kindref="member">Stack</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>a<sp/>deep-copy<sp/>of<sp/>Data:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="struct_function_parser_1_1_data_1a680226a014211a42b2186a3dc0da0292" refkind="member"><highlight class="normal"><ref refid="struct_function_parser_1_1_data_1a2f7002e4cc588de6091472be924689b0" kindref="member">FunctionParser::Data::Data</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_function_parser_1_1_data" kindref="compound">Data</ref>&amp;<sp/>cpy)<sp/>:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><ref refid="struct_function_parser_1_1_data_1af882554224f4977d69c5593254ac210e" kindref="member">varAmount</ref>(cpy.<ref refid="struct_function_parser_1_1_data_1af882554224f4977d69c5593254ac210e" kindref="member">varAmount</ref>),<sp/><ref refid="struct_function_parser_1_1_data_1a2e34291302b3dfafd29d64a6aacecb1f" kindref="member">useDegreeConversion</ref>(cpy.<ref refid="struct_function_parser_1_1_data_1a2e34291302b3dfafd29d64a6aacecb1f" kindref="member">useDegreeConversion</ref>),</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><ref refid="struct_function_parser_1_1_data_1ab5d416f3bb9086ea069ce85831e4cff6" kindref="member">Variables</ref>(cpy.<ref refid="struct_function_parser_1_1_data_1ab5d416f3bb9086ea069ce85831e4cff6" kindref="member">Variables</ref>),<sp/><ref refid="struct_function_parser_1_1_data_1a832899b555441fe2ce6bfaf5e0c19f6d" kindref="member">Constants</ref>(cpy.<ref refid="struct_function_parser_1_1_data_1a832899b555441fe2ce6bfaf5e0c19f6d" kindref="member">Constants</ref>),</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><ref refid="struct_function_parser_1_1_data_1aca8bc3c4c9840a4ce7fc75a6fb6d0e61" kindref="member">FuncPtrNames</ref>(cpy.<ref refid="struct_function_parser_1_1_data_1aca8bc3c4c9840a4ce7fc75a6fb6d0e61" kindref="member">FuncPtrNames</ref>),<sp/><ref refid="struct_function_parser_1_1_data_1a1ba8025daa062d7eef15b95a49c4607f" kindref="member">FuncPtrs</ref>(cpy.<ref refid="struct_function_parser_1_1_data_1a1ba8025daa062d7eef15b95a49c4607f" kindref="member">FuncPtrs</ref>),</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><ref refid="struct_function_parser_1_1_data_1ac552328a6854b174a7d085d9df0c8943" kindref="member">FuncParserNames</ref>(cpy.<ref refid="struct_function_parser_1_1_data_1ac552328a6854b174a7d085d9df0c8943" kindref="member">FuncParserNames</ref>),<sp/><ref refid="struct_function_parser_1_1_data_1a29d036708b0524b8ff0ddd3e6248ef6f" kindref="member">FuncParsers</ref>(cpy.<ref refid="struct_function_parser_1_1_data_1a29d036708b0524b8ff0ddd3e6248ef6f" kindref="member">FuncParsers</ref>),</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><ref refid="struct_function_parser_1_1_data_1a113be528db3c02713aa9887732897f8d" kindref="member">ByteCode</ref>(0),<sp/><ref refid="struct_function_parser_1_1_data_1a6037b3f5d5d8854dfd9ec15b9ac0924f" kindref="member">ByteCodeSize</ref>(cpy.<ref refid="struct_function_parser_1_1_data_1a6037b3f5d5d8854dfd9ec15b9ac0924f" kindref="member">ByteCodeSize</ref>),</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><ref refid="struct_function_parser_1_1_data_1a5a1b2b3c4adaed1b098413547cc67ce3" kindref="member">Immed</ref>(0),<sp/><ref refid="struct_function_parser_1_1_data_1a6391f52f7d877cdde635f758d7e9fdbb" kindref="member">ImmedSize</ref>(cpy.<ref refid="struct_function_parser_1_1_data_1a6391f52f7d877cdde635f758d7e9fdbb" kindref="member">ImmedSize</ref>),</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><ref refid="struct_function_parser_1_1_data_1a1ba27ea1afffc0f361e4da36723caaa7" kindref="member">Stack</ref>(0),<sp/><ref refid="struct_function_parser_1_1_data_1afb5f715f8c45ce98b654cb169e656c8b" kindref="member">StackSize</ref>(cpy.<ref refid="struct_function_parser_1_1_data_1afb5f715f8c45ce98b654cb169e656c8b" kindref="member">StackSize</ref>)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_function_parser_1_1_data_1a6037b3f5d5d8854dfd9ec15b9ac0924f" kindref="member">ByteCodeSize</ref>)<sp/><ref refid="struct_function_parser_1_1_data_1a113be528db3c02713aa9887732897f8d" kindref="member">ByteCode</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">[<ref refid="struct_function_parser_1_1_data_1a6037b3f5d5d8854dfd9ec15b9ac0924f" kindref="member">ByteCodeSize</ref>];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_function_parser_1_1_data_1a6391f52f7d877cdde635f758d7e9fdbb" kindref="member">ImmedSize</ref>)<sp/><ref refid="struct_function_parser_1_1_data_1a5a1b2b3c4adaed1b098413547cc67ce3" kindref="member">Immed</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[<ref refid="struct_function_parser_1_1_data_1a6391f52f7d877cdde635f758d7e9fdbb" kindref="member">ImmedSize</ref>];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_function_parser_1_1_data_1afb5f715f8c45ce98b654cb169e656c8b" kindref="member">StackSize</ref>)<sp/><ref refid="struct_function_parser_1_1_data_1a1ba27ea1afffc0f361e4da36723caaa7" kindref="member">Stack</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[<ref refid="struct_function_parser_1_1_data_1afb5f715f8c45ce98b654cb169e656c8b" kindref="member">StackSize</ref>];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="struct_function_parser_1_1_data_1a6037b3f5d5d8854dfd9ec15b9ac0924f" kindref="member">ByteCodeSize</ref>;<sp/>++i)<sp/><ref refid="struct_function_parser_1_1_data_1a113be528db3c02713aa9887732897f8d" kindref="member">ByteCode</ref>[i]<sp/>=<sp/>cpy.<ref refid="struct_function_parser_1_1_data_1a113be528db3c02713aa9887732897f8d" kindref="member">ByteCode</ref>[i];</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="struct_function_parser_1_1_data_1a6391f52f7d877cdde635f758d7e9fdbb" kindref="member">ImmedSize</ref>;<sp/>++i)<sp/><ref refid="struct_function_parser_1_1_data_1a5a1b2b3c4adaed1b098413547cc67ce3" kindref="member">Immed</ref>[i]<sp/>=<sp/>cpy.<ref refid="struct_function_parser_1_1_data_1a5a1b2b3c4adaed1b098413547cc67ce3" kindref="member">Immed</ref>[i];</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>copy<sp/>the<sp/>stack<sp/>contents<sp/>because<sp/>it&apos;s<sp/>obsolete<sp/>outside<sp/>Eval()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Function<sp/>parsing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//===========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>messages<sp/>returned<sp/>by<sp/>ErrorMsg():</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ParseErrorMessage[]<sp/>={</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Syntax<sp/>error&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Mismatched<sp/>parenthesis&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>&apos;)&apos;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>parentheses&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Syntax<sp/>error:<sp/>Operator<sp/>expected&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>memory&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;An<sp/>unexpected<sp/>error<sp/>occurred.<sp/>Please<sp/>make<sp/>a<sp/>full<sp/>bug<sp/>report<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;to<sp/>the<sp/>author&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Syntax<sp/>error<sp/>in<sp/>parameter<sp/>&apos;Vars&apos;<sp/>given<sp/>to<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FunctionParser::Parse()&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Illegal<sp/>number<sp/>of<sp/>parameters<sp/>to<sp/>function&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Syntax<sp/>error:<sp/>Premature<sp/>end<sp/>of<sp/>string&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Syntax<sp/>error:<sp/>Expecting<sp/>(<sp/>after<sp/>function&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ParseVars(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>Vars,<sp/>map&lt;string,<sp/>unsigned&gt;&amp;<sp/>dest)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>varNumber<sp/>=<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a921e5415a35e6f4b55518ededca97cba" kindref="member">VarBegin</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ind1<sp/>=<sp/>0,<sp/>ind2;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ind1<sp/>&lt;<sp/>Vars.size())<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isalpha(Vars[ind1])<sp/>&amp;&amp;<sp/>Vars[ind1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ind2<sp/>=<sp/>ind1<sp/>+<sp/>1;<sp/>ind2<sp/>&lt;<sp/>Vars.size()<sp/>&amp;&amp;<sp/>Vars[ind2]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">;<sp/>++ind2)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isalnum(Vars[ind2])<sp/>&amp;&amp;<sp/>Vars[ind2]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>varName<sp/>=<sp/>Vars.substr(ind1,<sp/>ind2<sp/>-<sp/>ind1);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dest.insert(make_pair(varName,<sp/>varNumber++)).second<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind1<sp/>=<sp/>ind2<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="class_function_parser_1a79441f19176e18e88155f1101108dbe6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a79441f19176e18e88155f1101108dbe6" kindref="member">FunctionParser::isValidName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.empty()<sp/>||<sp/>(!isalpha(name[0])<sp/>&amp;&amp;<sp/>name[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>name.size();<sp/>++i)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isalnum(name[i])<sp/>&amp;&amp;<sp/>name[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FindFunction(name.c_str()))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constants:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="class_function_parser_1a481976b6eb58b15d31d4f3700d9ad730" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a481976b6eb58b15d31d4f3700d9ad730" kindref="member">FunctionParser::AddConstant</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1a79441f19176e18e88155f1101108dbe6" kindref="member">isValidName</ref>(name))<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>n<sp/>=<sp/>name.c_str();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1a1c1ea54f04c1dfb8d8609240ba9f5f40" kindref="member">FindVariable</ref>(n,<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ac552328a6854b174a7d085d9df0c8943" kindref="member">FuncParserNames</ref>)<sp/>!=</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ac552328a6854b174a7d085d9df0c8943" kindref="member">FuncParserNames</ref>.end()<sp/>||</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a1c1ea54f04c1dfb8d8609240ba9f5f40" kindref="member">FindVariable</ref>(n,<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1aca8bc3c4c9840a4ce7fc75a6fb6d0e61" kindref="member">FuncPtrNames</ref>)<sp/>!=</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1aca8bc3c4c9840a4ce7fc75a6fb6d0e61" kindref="member">FuncPtrNames</ref>.end())</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a0af0f9ad348adf7df57fa630eddf8e47" kindref="member">copyOnWrite</ref>();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a832899b555441fe2ce6bfaf5e0c19f6d" kindref="member">Constants</ref>[name]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Function<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="class_function_parser_1a8d477dd0041ca594dac795bba24c9f3a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a8d477dd0041ca594dac795bba24c9f3a" kindref="member">FunctionParser::AddFunction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1acca53651fb8f1c7a44e3d2cac7e62455" kindref="member">FunctionPtr</ref><sp/>func,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>paramsAmount)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1a79441f19176e18e88155f1101108dbe6" kindref="member">isValidName</ref>(name))<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>n<sp/>=<sp/>name.c_str();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1a1c1ea54f04c1dfb8d8609240ba9f5f40" kindref="member">FindVariable</ref>(n,<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ac552328a6854b174a7d085d9df0c8943" kindref="member">FuncParserNames</ref>)<sp/>!=</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ac552328a6854b174a7d085d9df0c8943" kindref="member">FuncParserNames</ref>.end()<sp/>||</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a305fdcea81a498567dc92010338cee7c" kindref="member">FindConstant</ref>(n)<sp/>!=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a832899b555441fe2ce6bfaf5e0c19f6d" kindref="member">Constants</ref>.end())</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a0af0f9ad348adf7df57fa630eddf8e47" kindref="member">copyOnWrite</ref>();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1aca8bc3c4c9840a4ce7fc75a6fb6d0e61" kindref="member">FuncPtrNames</ref>[name]<sp/>=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a1ba8025daa062d7eef15b95a49c4607f" kindref="member">FuncPtrs</ref>.size();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a1ba8025daa062d7eef15b95a49c4607f" kindref="member">FuncPtrs</ref>.push_back(<ref refid="struct_function_parser_1_1_data_1_1_func_ptr_data" kindref="compound">Data::FuncPtrData</ref>(func,<sp/>paramsAmount));</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="class_function_parser_1abfc0c76a7006ba7b0e45e21bcd6f83cd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1abfc0c76a7006ba7b0e45e21bcd6f83cd" kindref="member">FunctionParser::checkRecursiveLinking</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_function_parser" kindref="compound">FunctionParser</ref>*<sp/>fp)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fp-&gt;<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a29d036708b0524b8ff0ddd3e6248ef6f" kindref="member">FuncParsers</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1abfc0c76a7006ba7b0e45e21bcd6f83cd" kindref="member">checkRecursiveLinking</ref>(fp-&gt;<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a29d036708b0524b8ff0ddd3e6248ef6f" kindref="member">FuncParsers</ref>[i]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="class_function_parser_1a7d6c6465658e9831d0c51e3bd6b5a4c0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a8d477dd0041ca594dac795bba24c9f3a" kindref="member">FunctionParser::AddFunction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser" kindref="compound">FunctionParser</ref>&amp;<sp/>parser)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1a79441f19176e18e88155f1101108dbe6" kindref="member">isValidName</ref>(name))<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>n<sp/>=<sp/>name.c_str();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1a1c1ea54f04c1dfb8d8609240ba9f5f40" kindref="member">FindVariable</ref>(n,<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1aca8bc3c4c9840a4ce7fc75a6fb6d0e61" kindref="member">FuncPtrNames</ref>)<sp/>!=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1aca8bc3c4c9840a4ce7fc75a6fb6d0e61" kindref="member">FuncPtrNames</ref>.end()<sp/>||</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a305fdcea81a498567dc92010338cee7c" kindref="member">FindConstant</ref>(n)<sp/>!=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a832899b555441fe2ce6bfaf5e0c19f6d" kindref="member">Constants</ref>.end())</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1abfc0c76a7006ba7b0e45e21bcd6f83cd" kindref="member">checkRecursiveLinking</ref>(&amp;parser))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a0af0f9ad348adf7df57fa630eddf8e47" kindref="member">copyOnWrite</ref>();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ac552328a6854b174a7d085d9df0c8943" kindref="member">FuncParserNames</ref>[name]<sp/>=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a29d036708b0524b8ff0ddd3e6248ef6f" kindref="member">FuncParsers</ref>.size();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a29d036708b0524b8ff0ddd3e6248ef6f" kindref="member">FuncParsers</ref>.push_back(&amp;parser);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Main<sp/>parsing<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="class_function_parser_1af4e0b209ec9771dcd76e27f3fcad1b51" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1af4e0b209ec9771dcd76e27f3fcad1b51" kindref="member">FunctionParser::Parse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>Function,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>Vars,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useDegrees)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a0af0f9ad348adf7df57fa630eddf8e47" kindref="member">copyOnWrite</ref>();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ab5d416f3bb9086ea069ce85831e4cff6" kindref="member">Variables</ref>.clear();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ParseVars(Vars,<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ab5d416f3bb9086ea069ce85831e4cff6" kindref="member">Variables</ref>))<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7a970abfe88a6d4f3ccf0f999d4c0a0445" kindref="member">INVALID_VARS</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Function.size();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1af882554224f4977d69c5593254ac210e" kindref="member">varAmount</ref><sp/>=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ab5d416f3bb9086ea069ce85831e4cff6" kindref="member">Variables</ref>.size();<sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>for<sp/>Eval()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Func<sp/>=<sp/>Function.c_str();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7afe98956d3451f7e3d66f259f8b36108a" kindref="member">FP_NO_ERROR</ref>;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Result<sp/>=<sp/><ref refid="class_function_parser_1a3895fdbb2f21fc7facebcd4a3c2399f7" kindref="member">CheckSyntax</ref>(Func);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>&gt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a2e34291302b3dfafd29d64a6aacecb1f" kindref="member">useDegreeConversion</ref><sp/>=<sp/>useDegrees;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_function_parser_1aa136efc410ad6a9c2992fb6e1c9b057c" kindref="member">Compile</ref>(Func))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Function.size();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ab5d416f3bb9086ea069ce85831e4cff6" kindref="member">Variables</ref>.clear();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7afe98956d3451f7e3d66f259f8b36108a" kindref="member">FP_NO_ERROR</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fpOperators[]<sp/>={</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&amp;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>given<sp/>char<sp/>an<sp/>operator?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(Returns<sp/>0<sp/>if<sp/>not,<sp/>else<sp/>the<sp/>size<sp/>of<sp/>the<sp/>operator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IsOperator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>F)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>opInd<sp/>=<sp/>0;<sp/>fpOperators[opInd];<sp/>++opInd)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op<sp/>=<sp/>fpOperators[opInd];</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>F[n]<sp/>==<sp/>*op;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++op;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*op<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op<sp/>-<sp/>fpOperators[opInd];</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>whitespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sws(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>F,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>Ind)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(F[Ind]<sp/>&amp;&amp;<sp/>isspace(F[Ind]))<sp/>++Ind;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>iterator<sp/>to<sp/>the<sp/>variable<sp/>with<sp/>the<sp/>same<sp/>name<sp/>as<sp/>&apos;F&apos;,<sp/>or<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Variables.end()<sp/>if<sp/>no<sp/>such<sp/>variable<sp/>exists:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>FunctionParser::Data::VarMap_t::const_iterator</highlight></codeline>
<codeline lineno="344" refid="class_function_parser_1a1c1ea54f04c1dfb8d8609240ba9f5f40" refkind="member"><highlight class="normal"><ref refid="class_function_parser_1a1c1ea54f04c1dfb8d8609240ba9f5f40" kindref="member">FunctionParser::FindVariable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>F,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_function_parser_1_1_data_1a02f3fbca3164d0e498312b418258ea84" kindref="member">Data::VarMap_t</ref>&amp;<sp/>vars)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vars.size())<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ind<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isalnum(F[ind])<sp/>||<sp/>F[ind]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">)<sp/>++ind;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ind)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name(F,<sp/>ind);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vars.find(name);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vars.end();</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>FunctionParser::Data::ConstMap_t::const_iterator</highlight></codeline>
<codeline lineno="357" refid="class_function_parser_1a305fdcea81a498567dc92010338cee7c" refkind="member"><highlight class="normal"><ref refid="class_function_parser_1a305fdcea81a498567dc92010338cee7c" kindref="member">FunctionParser::FindConstant</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>F)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a832899b555441fe2ce6bfaf5e0c19f6d" kindref="member">Constants</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ind<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isalnum(F[ind])<sp/>||<sp/>F[ind]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">)<sp/>++ind;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ind)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name(F,<sp/>ind);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a832899b555441fe2ce6bfaf5e0c19f6d" kindref="member">Constants</ref>.find(name);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a832899b555441fe2ce6bfaf5e0c19f6d" kindref="member">Constants</ref>.end();</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>function<sp/>string<sp/>syntax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="class_function_parser_1a3895fdbb2f21fc7facebcd4a3c2399f7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a3895fdbb2f21fc7facebcd4a3c2399f7" kindref="member">FunctionParser::CheckSyntax</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Function)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_function_parser_1_1_data_1a02f3fbca3164d0e498312b418258ea84" kindref="member">Data::VarMap_t</ref>&amp;<sp/>Variables<sp/>=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ab5d416f3bb9086ea069ce85831e4cff6" kindref="member">Variables</ref>;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_function_parser_1_1_data_1a74ff90f5d1687b68363d1602ef0ccece" kindref="member">Data::ConstMap_t</ref>&amp;<sp/>Constants<sp/>=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a832899b555441fe2ce6bfaf5e0c19f6d" kindref="member">Constants</ref>;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_function_parser_1_1_data_1a02f3fbca3164d0e498312b418258ea84" kindref="member">Data::VarMap_t</ref>&amp;<sp/>FuncPtrNames<sp/>=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1aca8bc3c4c9840a4ce7fc75a6fb6d0e61" kindref="member">FuncPtrNames</ref>;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_function_parser_1_1_data_1a02f3fbca3164d0e498312b418258ea84" kindref="member">Data::VarMap_t</ref>&amp;<sp/>FuncParserNames<sp/>=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ac552328a6854b174a7d085d9df0c8943" kindref="member">FuncParserNames</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;int&gt;<sp/>functionParenthDepth;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ind<sp/>=<sp/>0,<sp/>ParenthCnt<sp/>=<sp/>0,<sp/>c;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Ptr;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(Function,<sp/>Ind);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>Function[Ind];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>valid<sp/>operand<sp/>(must<sp/>appear)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>leading<sp/>-<sp/>or<sp/>!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(Function,<sp/>++Ind);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>Function[Ind];</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7ad000e35ddadcb28fa56e509766b051df" kindref="member">PREMATURE_EOS</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Ind;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>math<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>foundFunc<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition" kindref="compound">FuncDefinition</ref>*<sp/>fptr<sp/>=<sp/>FindFunction(&amp;Function[Ind]);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fptr)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ind<sp/>+=<sp/>fptr-&gt;<ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition_1a983fcca7d404cf18feeadf590ea2f01a" kindref="member">nameLength</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foundFunc<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>user-defined<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data::VarMap_t::const_iterator<sp/>fIter<sp/>=</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a1c1ea54f04c1dfb8d8609240ba9f5f40" kindref="member">FindVariable</ref>(&amp;Function[Ind],<sp/>FuncPtrNames);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fIter<sp/>!=<sp/>FuncPtrNames.end())<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ind<sp/>+=<sp/>fIter-&gt;first.size();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foundFunc<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data::VarMap_t::const_iterator<sp/>pIter<sp/>=</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a1c1ea54f04c1dfb8d8609240ba9f5f40" kindref="member">FindVariable</ref>(&amp;Function[Ind],<sp/>FuncParserNames);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pIter<sp/>!=<sp/>FuncParserNames.end())<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ind<sp/>+=<sp/>pIter-&gt;first.size();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foundFunc<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(foundFunc)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(Function,<sp/>Ind);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>Function[Ind];</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7a5d885cdd62d468c4643667704ed21f43" kindref="member">EXPECT_PARENTH_FUNC</ref>;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Ind;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ind2<sp/>=<sp/>Ind<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(Function,<sp/>Ind2);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function[Ind2]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ind<sp/>=<sp/>Ind2<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(Function,<sp/>Ind);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>Function[Ind];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ugly,<sp/>but<sp/>other<sp/>methods<sp/>would<sp/>just<sp/>be<sp/>uglier...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>CheckOperator;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functionParenthDepth.push_back(ParenthCnt<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>opening<sp/>parenthesis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++ParenthCnt;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(Function,<sp/>++Ind);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function[Ind]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7ac5ed9e2f99d67c7b11f22dcc1e096474" kindref="member">EMPTY_PARENTH</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Ind;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isdigit(c)<sp/>||<sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>isdigit(Function[Ind<sp/>+<sp/>1])))<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strtod(&amp;Function[Ind],<sp/>&amp;Ptr);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ind<sp/>+=<sp/>int(Ptr<sp/>-<sp/>&amp;Function[Ind]);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(Function,<sp/>Ind);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>Function[Ind];</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data::VarMap_t::const_iterator<sp/>vIter<sp/>=</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a1c1ea54f04c1dfb8d8609240ba9f5f40" kindref="member">FindVariable</ref>(&amp;Function[Ind],<sp/>Variables);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vIter<sp/>!=<sp/>Variables.end())</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ind<sp/>+=<sp/>vIter-&gt;first.size();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data::ConstMap_t::const_iterator<sp/>cIter<sp/>=</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a305fdcea81a498567dc92010338cee7c" kindref="member">FindConstant</ref>(&amp;Function[Ind]);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cIter<sp/>!=<sp/>Constants.end())</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ind<sp/>+=<sp/>cIter-&gt;first.size();</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7ae2d4f26e44818f756cbdefbeb76e4ca3" kindref="member">SYNTAX_ERROR</ref>;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Ind;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(Function,<sp/>Ind);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>Function[Ind];</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>closing<sp/>parenthesis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(functionParenthDepth.size()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functionParenthDepth.back()<sp/>==<sp/>ParenthCnt)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functionParenthDepth.pop_back();</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((--ParenthCnt)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7a8d264fb5dadc95cb61c97384d9351669" kindref="member">MISM_PARENTH</ref>;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Ind;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(Function,<sp/>++Ind);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>Function[Ind];</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>get<sp/>here,<sp/>we<sp/>have<sp/>a<sp/>legal<sp/>operand<sp/>and<sp/>now<sp/>a<sp/>legal<sp/>operator<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>string<sp/>must<sp/>follow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">CheckOperator:</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>EOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>only<sp/>way<sp/>to<sp/>end<sp/>the<sp/>checking<sp/>loop<sp/>without<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!functionParenthDepth.empty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functionParenthDepth.back()<sp/>==<sp/>ParenthCnt)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opSize<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opSize<sp/>=<sp/>IsOperator(Function<sp/>+<sp/>Ind);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opSize<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7aa9b7c33316017f2de413ed7f140f36c6" kindref="member">EXPECT_OPERATOR</ref>;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Ind;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>get<sp/>here,<sp/>we<sp/>have<sp/>an<sp/>operand<sp/>and<sp/>an<sp/>operator;<sp/>the<sp/>next<sp/>loop<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>another<sp/>operand<sp/>(must<sp/>appear)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ind<sp/>+=<sp/>opSize;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>all<sp/>opened<sp/>parentheses<sp/>are<sp/>also<sp/>closed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ParenthCnt<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7a8e549b77de5e9f6f52e3a19a6267b16c" kindref="member">MISSING_PARENTH</ref>;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Ind;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>string<sp/>is<sp/>ok</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7afe98956d3451f7e3d66f259f8b36108a" kindref="member">FP_NO_ERROR</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compile<sp/>function<sp/>string<sp/>to<sp/>bytecode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533" refid="class_function_parser_1aa136efc410ad6a9c2992fb6e1c9b057c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1aa136efc410ad6a9c2992fb6e1c9b057c" kindref="member">FunctionParser::Compile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Function)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a113be528db3c02713aa9887732897f8d" kindref="member">ByteCode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a113be528db3c02713aa9887732897f8d" kindref="member">ByteCode</ref>;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a113be528db3c02713aa9887732897f8d" kindref="member">ByteCode</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a5a1b2b3c4adaed1b098413547cc67ce3" kindref="member">Immed</ref>)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a5a1b2b3c4adaed1b098413547cc67ce3" kindref="member">Immed</ref>;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a5a1b2b3c4adaed1b098413547cc67ce3" kindref="member">Immed</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a1ba27ea1afffc0f361e4da36723caaa7" kindref="member">Stack</ref>)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a1ba27ea1afffc0f361e4da36723caaa7" kindref="member">Stack</ref>;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a1ba27ea1afffc0f361e4da36723caaa7" kindref="member">Stack</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;unsigned&gt;<sp/>byteCode;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>byteCode.reserve(1024);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a78e461023408c6074247df656f93bbae" kindref="member">tempByteCode</ref><sp/>=<sp/>&amp;byteCode;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>immed;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>immed.reserve(1024);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a9e6c21543859ee17e917a292a16c495a" kindref="member">tempImmed</ref><sp/>=<sp/>&amp;immed;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1afb5f715f8c45ce98b654cb169e656c8b" kindref="member">StackSize</ref><sp/>=<sp/><ref refid="class_function_parser_1a4a54f868e24abc53d4474ca538c999bf" kindref="member">StackPtr</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a854c0c23a60d2d206ddf67015747a80a" kindref="member">CompileExpression</ref>(Function,<sp/>0);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>!=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7afe98956d3451f7e3d66f259f8b36108a" kindref="member">FP_NO_ERROR</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a6037b3f5d5d8854dfd9ec15b9ac0924f" kindref="member">ByteCodeSize</ref><sp/>=<sp/>byteCode.size();</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a6391f52f7d877cdde635f758d7e9fdbb" kindref="member">ImmedSize</ref><sp/>=<sp/>immed.size();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a6037b3f5d5d8854dfd9ec15b9ac0924f" kindref="member">ByteCodeSize</ref>)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a113be528db3c02713aa9887732897f8d" kindref="member">ByteCode</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">[<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a6037b3f5d5d8854dfd9ec15b9ac0924f" kindref="member">ByteCodeSize</ref>];</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a113be528db3c02713aa9887732897f8d" kindref="member">ByteCode</ref>,<sp/>&amp;byteCode[0],</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)*<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a6037b3f5d5d8854dfd9ec15b9ac0924f" kindref="member">ByteCodeSize</ref>);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a6391f52f7d877cdde635f758d7e9fdbb" kindref="member">ImmedSize</ref>)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a5a1b2b3c4adaed1b098413547cc67ce3" kindref="member">Immed</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a6391f52f7d877cdde635f758d7e9fdbb" kindref="member">ImmedSize</ref>];</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a5a1b2b3c4adaed1b098413547cc67ce3" kindref="member">Immed</ref>,<sp/>&amp;immed[0],</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)*<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a6391f52f7d877cdde635f758d7e9fdbb" kindref="member">ImmedSize</ref>);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1afb5f715f8c45ce98b654cb169e656c8b" kindref="member">StackSize</ref>)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a1ba27ea1afffc0f361e4da36723caaa7" kindref="member">Stack</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1afb5f715f8c45ce98b654cb169e656c8b" kindref="member">StackSize</ref>];</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579" refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">FunctionParser::AddCompiledByte</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a78e461023408c6074247df656f93bbae" kindref="member">tempByteCode</ref>-&gt;push_back(c);</highlight></codeline>
<codeline lineno="581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583" refid="class_function_parser_1a59cf4b93d74e0572386742603977f886" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a59cf4b93d74e0572386742603977f886" kindref="member">FunctionParser::AddImmediate</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a9e6c21543859ee17e917a292a16c495a" kindref="member">tempImmed</ref>-&gt;push_back(i);</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587" refid="class_function_parser_1aadefd3517f92e066d9926a1998e9fe2f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1aadefd3517f92e066d9926a1998e9fe2f" kindref="member">FunctionParser::AddFunctionOpcode</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>opcode)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a2e34291302b3dfafd29d64a6aacecb1f" kindref="member">useDegreeConversion</ref>)</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(opcode)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a696a68a214d10fe1d99e8a8f2455fb31" kindref="member">cCos</ref>:</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a3fb844f94abb95cc1a8fa094afe9a605" kindref="member">cCosh</ref>:</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a5431180a1afb60f2f8137bf79e277774" kindref="member">cCot</ref>:</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104af071b49fa2edc878f19d08e923f41e37" kindref="member">cCsc</ref>:</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ab6a937aed33eb752cb4c5e0f02288977" kindref="member">cSec</ref>:</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a65a83ab967f2102842e90cb2755bd0dd" kindref="member">cSin</ref>:</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a90157e1a55d7a1802ebd34dfae3a0cb2" kindref="member">cSinh</ref>:</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a81d600178a7abd46f8b21c3ec7c796e2" kindref="member">cTan</ref>:</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ac8ee3677fb612511ff3fdf34871fa62d" kindref="member">cTanh</ref>:</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a21d098255e6ea84b48d7a94f0319c0b7" kindref="member">cRad</ref>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(opcode);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a2e34291302b3dfafd29d64a6aacecb1f" kindref="member">useDegreeConversion</ref>)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(opcode)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a8d1b04fbbe63761d3fcdb5abca743bda" kindref="member">cAcos</ref>:</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_ASINH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a2b0abcb3ec5d45970e8efb45b7ec52d1" kindref="member">cAcosh</ref>:</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a0730c6d32992bfd85aaacad6cc53262d" kindref="member">cAsinh</ref>:</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104abcc41b4881e327850100d4d1d6b9b10a" kindref="member">cAtanh</ref>:</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a5cdf7b92a790ccaaff26c6c843ac960f" kindref="member">cAsin</ref>:</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a98784402ea660463ff310c7099e452e4" kindref="member">cAtan</ref>:</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a4352090ce78dee0e07fb5e05978efd33" kindref="member">cAtan2</ref>:</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a16cd2bcb30ffc27362bdb0f4172254e2" kindref="member">cDeg</ref>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619" refid="class_function_parser_1a2ba1bb889a7035da4a7639d6b7ce53c6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a2ba1bb889a7035da4a7639d6b7ce53c6" kindref="member">FunctionParser::incStackPtr</ref>()<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++<ref refid="class_function_parser_1a4a54f868e24abc53d4474ca538c999bf" kindref="member">StackPtr</ref><sp/>&gt;<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1afb5f715f8c45ce98b654cb169e656c8b" kindref="member">StackSize</ref>)<sp/>++(<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1afb5f715f8c45ce98b654cb169e656c8b" kindref="member">StackSize</ref>);</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compile<sp/>if()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626" refid="class_function_parser_1a9978dd583ee328a7f71a6075a3c5f97c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a9978dd583ee328a7f71a6075a3c5f97c" kindref="member">FunctionParser::CompileIf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>F,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1a854c0c23a60d2d206ddf67015747a80a" kindref="member">CompileExpression</ref>(F,<sp/>ind,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(F[ind2]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7abeede85e1cc0910db7ae8f06e4fe29e9" kindref="member">ILL_PARAMS_AMOUNT</ref>;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a9b633958b9e19a49d476dc215664ba99" kindref="member">cIf</ref>);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>curByteCodeSize<sp/>=<sp/><ref refid="class_function_parser_1a78e461023408c6074247df656f93bbae" kindref="member">tempByteCode</ref>-&gt;size();</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(0);<sp/></highlight><highlight class="comment">//<sp/>Jump<sp/>index;<sp/>to<sp/>be<sp/>set<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(0);<sp/></highlight><highlight class="comment">//<sp/>Immed<sp/>jump<sp/>index;<sp/>to<sp/>be<sp/>set<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>--<ref refid="class_function_parser_1a4a54f868e24abc53d4474ca538c999bf" kindref="member">StackPtr</ref>;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1a854c0c23a60d2d206ddf67015747a80a" kindref="member">CompileExpression</ref>(F,<sp/>ind2<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(F[ind2]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7abeede85e1cc0910db7ae8f06e4fe29e9" kindref="member">ILL_PARAMS_AMOUNT</ref>;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104accb8c0016ec35c3aadbf05d27862260a" kindref="member">cJump</ref>);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>curByteCodeSize2<sp/>=<sp/><ref refid="class_function_parser_1a78e461023408c6074247df656f93bbae" kindref="member">tempByteCode</ref>-&gt;size();</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>curImmedSize2<sp/>=<sp/><ref refid="class_function_parser_1a9e6c21543859ee17e917a292a16c495a" kindref="member">tempImmed</ref>-&gt;size();</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(0);<sp/></highlight><highlight class="comment">//<sp/>Jump<sp/>index;<sp/>to<sp/>be<sp/>set<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(0);<sp/></highlight><highlight class="comment">//<sp/>Immed<sp/>jump<sp/>index;<sp/>to<sp/>be<sp/>set<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>--<ref refid="class_function_parser_1a4a54f868e24abc53d4474ca538c999bf" kindref="member">StackPtr</ref>;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1a854c0c23a60d2d206ddf67015747a80a" kindref="member">CompileExpression</ref>(F,<sp/>ind2<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(F[ind2]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7abeede85e1cc0910db7ae8f06e4fe29e9" kindref="member">ILL_PARAMS_AMOUNT</ref>;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>jump<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tempByteCode)[curByteCodeSize]<sp/>=<sp/>curByteCodeSize2<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tempByteCode)[curByteCodeSize<sp/>+<sp/>1]<sp/>=<sp/>curImmedSize2;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tempByteCode)[curByteCodeSize2]<sp/>=<sp/><ref refid="class_function_parser_1a78e461023408c6074247df656f93bbae" kindref="member">tempByteCode</ref>-&gt;size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tempByteCode)[curByteCodeSize2<sp/>+<sp/>1]<sp/>=<sp/><ref refid="class_function_parser_1a9e6c21543859ee17e917a292a16c495a" kindref="member">tempImmed</ref>-&gt;size();</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670" refid="class_function_parser_1a22e24efb5ef28aa34025bf49fe505010" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a22e24efb5ef28aa34025bf49fe505010" kindref="member">FunctionParser::CompileFunctionParams</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>F,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>requiredParams)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind2<sp/>=<sp/>ind;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(requiredParams<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>curStackPtr<sp/>=<sp/><ref refid="class_function_parser_1a4a54f868e24abc53d4474ca538c999bf" kindref="member">StackPtr</ref>;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1a854c0c23a60d2d206ddf67015747a80a" kindref="member">CompileExpression</ref>(F,<sp/>ind);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1a4a54f868e24abc53d4474ca538c999bf" kindref="member">StackPtr</ref><sp/>!=<sp/>curStackPtr<sp/>+<sp/>requiredParams)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7abeede85e1cc0910db7ae8f06e4fe29e9" kindref="member">ILL_PARAMS_AMOUNT</ref>;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a4a54f868e24abc53d4474ca538c999bf" kindref="member">StackPtr</ref><sp/>-=<sp/>requiredParams<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a2ba1bb889a7035da4a7639d6b7ce53c6" kindref="member">incStackPtr</ref>();</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2<sp/>+<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>F[ind2]<sp/>is<sp/>&apos;)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compiles<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693" refid="class_function_parser_1a7673096cf704d1fa7ab542db5f22fe95" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a7673096cf704d1fa7ab542db5f22fe95" kindref="member">FunctionParser::CompileElement</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>F,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>sws(F,<sp/>ind);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>F[ind];</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind<sp/>=<sp/><ref refid="class_function_parser_1a854c0c23a60d2d206ddf67015747a80a" kindref="member">CompileExpression</ref>(F,<sp/>ind<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(F,<sp/>ind);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind<sp/>+<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>F[ind]<sp/>is<sp/>&apos;)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isdigit(c)<sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*||<sp/>c==&apos;-&apos;*/</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>Number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>startPtr<sp/>=<sp/>&amp;F[ind];</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>endPtr;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>strtod(startPtr,<sp/>&amp;endPtr);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a59cf4b93d74e0572386742603977f886" kindref="member">AddImmediate</ref>(val);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a1b0b57507c1e59f6c0d1ed16294a5b85" kindref="member">cImmed</ref>);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a2ba1bb889a7035da4a7639d6b7ce53c6" kindref="member">incStackPtr</ref>();</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind<sp/>+<sp/>(endPtr<sp/>-<sp/>startPtr);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isalpha(c)<sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>Function,<sp/>variable<sp/>or<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition" kindref="compound">FuncDefinition</ref>*<sp/>func<sp/>=<sp/>FindFunction(F<sp/>+<sp/>ind);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func)<sp/></highlight><highlight class="comment">//<sp/>is<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind2<sp/>=<sp/>ind<sp/>+<sp/>func-&gt;<ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition_1a983fcca7d404cf18feeadf590ea2f01a" kindref="member">nameLength</ref>;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);<sp/></highlight><highlight class="comment">//<sp/>F[ind2]<sp/>is<sp/>&apos;(&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(func-&gt;<ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition_1a6871458a853f321b0f566775d5c5d79c" kindref="member">name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;if&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>&quot;if&quot;<sp/>is<sp/>a<sp/>special<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a9978dd583ee328a7f71a6075a3c5f97c" kindref="member">CompileIf</ref>(F,<sp/>ind2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DISABLE_EVAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>requiredParams<sp/>=</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(func-&gt;<ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition_1a6871458a853f321b0f566775d5c5d79c" kindref="member">name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;eval&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>?</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ab5d416f3bb9086ea069ce85831e4cff6" kindref="member">Variables</ref>.size()<sp/>:<sp/>func-&gt;<ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition_1a023b73dfd337217c13d90f6498700094" kindref="member">params</ref>;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>requiredParams<sp/>=<sp/>func-&gt;<ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition_1a023b73dfd337217c13d90f6498700094" kindref="member">params</ref>;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1a22e24efb5ef28aa34025bf49fe505010" kindref="member">CompileFunctionParams</ref>(F,<sp/>ind2<sp/>+<sp/>1,<sp/>requiredParams);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1aadefd3517f92e066d9926a1998e9fe2f" kindref="member">AddFunctionOpcode</ref>(func-&gt;<ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition_1a0195d4058feaa7faba3394c44d878503" kindref="member">opcode</ref>);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2;<sp/></highlight><highlight class="comment">//<sp/>F[ind2-1]<sp/>is<sp/>&apos;)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data::VarMap_t::const_iterator<sp/>vIter<sp/>=</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a1c1ea54f04c1dfb8d8609240ba9f5f40" kindref="member">FindVariable</ref>(F<sp/>+<sp/>ind,<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ab5d416f3bb9086ea069ce85831e4cff6" kindref="member">Variables</ref>);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vIter<sp/>!=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ab5d416f3bb9086ea069ce85831e4cff6" kindref="member">Variables</ref>.end())<sp/></highlight><highlight class="comment">//<sp/>is<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(vIter-&gt;second);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a2ba1bb889a7035da4a7639d6b7ce53c6" kindref="member">incStackPtr</ref>();</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind<sp/>+<sp/>vIter-&gt;first.size();</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data::ConstMap_t::const_iterator<sp/>cIter<sp/>=<sp/><ref refid="class_function_parser_1a305fdcea81a498567dc92010338cee7c" kindref="member">FindConstant</ref>(F<sp/>+<sp/>ind);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cIter<sp/>!=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a832899b555441fe2ce6bfaf5e0c19f6d" kindref="member">Constants</ref>.end())<sp/></highlight><highlight class="comment">//<sp/>is<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a59cf4b93d74e0572386742603977f886" kindref="member">AddImmediate</ref>(cIter-&gt;second);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a1b0b57507c1e59f6c0d1ed16294a5b85" kindref="member">cImmed</ref>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a2ba1bb889a7035da4a7639d6b7ce53c6" kindref="member">incStackPtr</ref>();</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind<sp/>+<sp/>cIter-&gt;first.size();</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data::VarMap_t::const_iterator<sp/>fIter<sp/>=</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a1c1ea54f04c1dfb8d8609240ba9f5f40" kindref="member">FindVariable</ref>(F<sp/>+<sp/>ind,<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1aca8bc3c4c9840a4ce7fc75a6fb6d0e61" kindref="member">FuncPtrNames</ref>);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fIter<sp/>!=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1aca8bc3c4c9840a4ce7fc75a6fb6d0e61" kindref="member">FuncPtrNames</ref>.end())<sp/></highlight><highlight class="comment">//<sp/>is<sp/>user-defined<sp/>func<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>fIter-&gt;second;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind2<sp/>=<sp/>ind<sp/>+<sp/>fIter-&gt;first.length();</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);<sp/></highlight><highlight class="comment">//<sp/>F[ind2]<sp/>is<sp/>&apos;(&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1a22e24efb5ef28aa34025bf49fe505010" kindref="member">CompileFunctionParams</ref>(F,<sp/>ind2<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a1ba8025daa062d7eef15b95a49c4607f" kindref="member">FuncPtrs</ref>[index].params);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a8018524cbd1d4e0a8b2b4c4442655370" kindref="member">cFCall</ref>);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(index);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data::VarMap_t::const_iterator<sp/>pIter<sp/>=</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a1c1ea54f04c1dfb8d8609240ba9f5f40" kindref="member">FindVariable</ref>(F<sp/>+<sp/>ind,<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ac552328a6854b174a7d085d9df0c8943" kindref="member">FuncParserNames</ref>);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pIter<sp/>!=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ac552328a6854b174a7d085d9df0c8943" kindref="member">FuncParserNames</ref>.end())<sp/></highlight><highlight class="comment">//<sp/>is<sp/>user-defined<sp/>func<sp/>parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>pIter-&gt;second;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind2<sp/>=<sp/>ind<sp/>+<sp/>pIter-&gt;first.length();</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);<sp/></highlight><highlight class="comment">//<sp/>F[ind2]<sp/>is<sp/>&apos;(&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1a22e24efb5ef28aa34025bf49fe505010" kindref="member">CompileFunctionParams</ref></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(F,<sp/>ind2<sp/>+<sp/>1,<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a29d036708b0524b8ff0ddd3e6248ef6f" kindref="member">FuncParsers</ref>[index]-&gt;data-&gt;varAmount);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ab0962786a90ce59720b55799039d6b27" kindref="member">cPCall</ref>);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(index);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7a455a3ffd84dd6f97b008aba834c45b9e" kindref="member">UNEXPECTED_ERROR</ref>;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind;</highlight></codeline>
<codeline lineno="793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compiles<sp/>&apos;^&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797" refid="class_function_parser_1a34d2686ecb9619b0b459bfa249b64498" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a34d2686ecb9619b0b459bfa249b64498" kindref="member">FunctionParser::CompilePow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>F,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1a7673096cf704d1fa7ab542db5f22fe95" kindref="member">CompileElement</ref>(F,<sp/>ind);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(F[ind2]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1adda1df6bf29a91d38e838bdf96524f61" kindref="member">CompileUnaryMinus</ref>(F,<sp/>ind2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a07e80ec698466523ecc06b01abb75d13" kindref="member">cPow</ref>);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="class_function_parser_1a4a54f868e24abc53d4474ca538c999bf" kindref="member">StackPtr</ref>;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2;</highlight></codeline>
<codeline lineno="809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compiles<sp/>unary<sp/>&apos;-&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813" refid="class_function_parser_1adda1df6bf29a91d38e838bdf96524f61" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1adda1df6bf29a91d38e838bdf96524f61" kindref="member">FunctionParser::CompileUnaryMinus</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>F,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>sws(F,<sp/>ind);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(F[ind]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>||<sp/>F[ind]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind2<sp/>=<sp/>ind<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1a34d2686ecb9619b0b459bfa249b64498" kindref="member">CompilePow</ref>(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>are<sp/>negating<sp/>a<sp/>constant,<sp/>negate<sp/>the<sp/>constant<sp/>itself:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(F[ind]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="class_function_parser_1a78e461023408c6074247df656f93bbae" kindref="member">tempByteCode</ref>-&gt;back()<sp/>==<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a1b0b57507c1e59f6c0d1ed16294a5b85" kindref="member">cImmed</ref>)</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a9e6c21543859ee17e917a292a16c495a" kindref="member">tempImmed</ref>-&gt;back()<sp/>=<sp/>-<ref refid="class_function_parser_1a9e6c21543859ee17e917a292a16c495a" kindref="member">tempImmed</ref>-&gt;back();</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>are<sp/>negating<sp/>a<sp/>negation,<sp/>we<sp/>can<sp/>remove<sp/>both:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((F[ind]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="class_function_parser_1a78e461023408c6074247df656f93bbae" kindref="member">tempByteCode</ref>-&gt;back()<sp/>==<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104af1b190d07c3089e3bcafca4bc4bb6603" kindref="member">cNeg</ref>))</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a78e461023408c6074247df656f93bbae" kindref="member">tempByteCode</ref>-&gt;pop_back();</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(F[ind]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>?<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104af1b190d07c3089e3bcafca4bc4bb6603" kindref="member">cNeg</ref><sp/>:<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a7cfdc457d05db1914d66750b2566947f" kindref="member">cNot</ref>);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1a34d2686ecb9619b0b459bfa249b64498" kindref="member">CompilePow</ref>(F,<sp/>ind);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2;</highlight></codeline>
<codeline lineno="838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compiles<sp/>&apos;*&apos;,<sp/>&apos;/&apos;<sp/>and<sp/>&apos;%&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842" refid="class_function_parser_1ade4859b2f9b822a19a2beccbc25d36b0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1ade4859b2f9b822a19a2beccbc25d36b0" kindref="member">FunctionParser::CompileMult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>F,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1adda1df6bf29a91d38e838bdf96524f61" kindref="member">CompileUnaryMinus</ref>(F,<sp/>ind);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((op<sp/>=<sp/>F[ind2])<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>||<sp/>op<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>||<sp/>op<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1adda1df6bf29a91d38e838bdf96524f61" kindref="member">CompileUnaryMinus</ref>(F,<sp/>ind2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(op)<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">:<sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a973fc4ba1c6b35e6d97073100b8dbcb6" kindref="member">cMul</ref>);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">:<sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ab1f7ca90f0855acbdfcaae6bdbbf1f2e" kindref="member">cDiv</ref>);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">:<sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a0f3f8d8f710afc26fc7fc29253323cf7" kindref="member">cMod</ref>);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="class_function_parser_1a4a54f868e24abc53d4474ca538c999bf" kindref="member">StackPtr</ref>;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2;</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compiles<sp/>&apos;+&apos;<sp/>and<sp/>&apos;-&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866" refid="class_function_parser_1a9b3024d49f9094731f3cbd17eeea29e5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a9b3024d49f9094731f3cbd17eeea29e5" kindref="member">FunctionParser::CompileAddition</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>F,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind)<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1ade4859b2f9b822a19a2beccbc25d36b0" kindref="member">CompileMult</ref>(F,<sp/>ind);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((op<sp/>=<sp/>F[ind2])<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal"><sp/>||<sp/>op<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1ade4859b2f9b822a19a2beccbc25d36b0" kindref="member">CompileMult</ref>(F,<sp/>ind2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(op<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal"><sp/>?<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ab1e14fa6a928e36273aa17dfd4c42112" kindref="member">cAdd</ref><sp/>:<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a7153f64d6912f651f713e41618bafbe1" kindref="member">cSub</ref>);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="class_function_parser_1a4a54f868e24abc53d4474ca538c999bf" kindref="member">StackPtr</ref>;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2;</highlight></codeline>
<codeline lineno="879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compiles<sp/>&apos;=&apos;,<sp/>&apos;&lt;&apos;<sp/>and<sp/>&apos;&gt;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883" refid="class_function_parser_1a2418f51d1feca9195780bda66a64923a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a2418f51d1feca9195780bda66a64923a" kindref="member">FunctionParser::CompileComparison</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>F,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind)<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1a9b3024d49f9094731f3cbd17eeea29e5" kindref="member">CompileAddition</ref>(F,<sp/>ind);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((op<sp/>=<sp/>F[ind2])<sp/>==<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>op<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal"><sp/>||<sp/>op<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>||<sp/>op<sp/>==<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opSize<sp/>=<sp/>(F[ind2<sp/>+<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>?<sp/>2<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1a9b3024d49f9094731f3cbd17eeea29e5" kindref="member">CompileAddition</ref>(F,<sp/>ind2<sp/>+<sp/>opSize);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(op)<sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a4cb3bd20217436052efdae1dcb98055b" kindref="member">cEqual</ref>);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(opSize<sp/>==<sp/>1<sp/>?<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ad410381169d9a04a053f380b6d579180" kindref="member">cLess</ref><sp/>:<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ad0b627fa38703b87e3916018f49b3c1f" kindref="member">cLessOrEq</ref>);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(opSize<sp/>==<sp/>1<sp/>?<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ad00c65b938f482b9bed4a0d97ad9255e" kindref="member">cGreater</ref><sp/>:<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a19a3bc252ef72d5f1d6c567b61ba1e17" kindref="member">cGreaterOrEq</ref>);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104aba4ac6cefdd729a70a6d29aef951fccb" kindref="member">cNEqual</ref>);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="class_function_parser_1a4a54f868e24abc53d4474ca538c999bf" kindref="member">StackPtr</ref>;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2;</highlight></codeline>
<codeline lineno="910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compiles<sp/>&apos;&amp;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914" refid="class_function_parser_1adb0768f374333bbee4c84c30a2769d1b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1adb0768f374333bbee4c84c30a2769d1b" kindref="member">FunctionParser::CompileAnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>F,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1a2418f51d1feca9195780bda66a64923a" kindref="member">CompileComparison</ref>(F,<sp/>ind);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(F[ind2]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1a2418f51d1feca9195780bda66a64923a" kindref="member">CompileComparison</ref>(F,<sp/>ind2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104aee912331ff5ee86c753550c24e915778" kindref="member">cAnd</ref>);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="class_function_parser_1a4a54f868e24abc53d4474ca538c999bf" kindref="member">StackPtr</ref>;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2;</highlight></codeline>
<codeline lineno="926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compiles<sp/>&apos;|&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930" refid="class_function_parser_1a233a126157058829dcda9aa3f00781f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a233a126157058829dcda9aa3f00781f8" kindref="member">FunctionParser::CompileOr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>F,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1adb0768f374333bbee4c84c30a2769d1b" kindref="member">CompileAnd</ref>(F,<sp/>ind);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(F[ind2]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1adb0768f374333bbee4c84c30a2769d1b" kindref="member">CompileAnd</ref>(F,<sp/>ind2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a714d401cb9368826a87b7f15575de2a3" kindref="member">AddCompiledByte</ref>(<ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ae6d77f072bbd99214e7b7c231e88f9fa" kindref="member">cOr</ref>);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="class_function_parser_1a4a54f868e24abc53d4474ca538c999bf" kindref="member">StackPtr</ref>;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2;</highlight></codeline>
<codeline lineno="942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compiles<sp/>&apos;,&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946" refid="class_function_parser_1a854c0c23a60d2d206ddf67015747a80a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a854c0c23a60d2d206ddf67015747a80a" kindref="member">FunctionParser::CompileExpression</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>F,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stopAtComma)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1a233a126157058829dcda9aa3f00781f8" kindref="member">CompileOr</ref>(F,<sp/>ind);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stopAtComma)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(F[ind2]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind2<sp/>=<sp/><ref refid="class_function_parser_1a233a126157058829dcda9aa3f00781f8" kindref="member">CompileOr</ref>(F,<sp/>ind2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sws(F,<sp/>ind2);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind2;</highlight></codeline>
<codeline lineno="958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>parse<sp/>error<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964" refid="class_function_parser_1a000e3edaf5dc8ee121df03b731ff0192" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="class_function_parser_1a000e3edaf5dc8ee121df03b731ff0192" kindref="member">FunctionParser::ErrorMsg</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref><sp/>!=<sp/><ref refid="class_function_parser_1a0bb74d288d02ba86367cc1c85351c8e7afe98956d3451f7e3d66f259f8b36108a" kindref="member">FP_NO_ERROR</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParseErrorMessage[<ref refid="class_function_parser_1a8ae06b8ee6ddb247b6a7c0075fd6cf30" kindref="member">parseErrorType</ref>];</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Function<sp/>evaluation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="comment">//===========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>doubleToInt(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d<sp/>&lt;<sp/>0<sp/>?<sp/>-<sp/>int((-d)<sp/>+<sp/>.5)<sp/>:<sp/>int(d<sp/>+<sp/>.5);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Min(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d2)<sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d1<sp/>&lt;<sp/>d2<sp/>?<sp/>d1<sp/>:<sp/>d2;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Max(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d2)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d1<sp/>&gt;<sp/>d2<sp/>?<sp/>d1<sp/>:<sp/>d2;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>DegreesToRadians(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>degrees)<sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>degrees<sp/>*<sp/>(<ref refid="fparser_8cpp_1ae71449b1cc6e6250b91f539153a7a0d3" kindref="member">M_PI</ref><sp/>/<sp/>180.0);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RadiansToDegrees(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radians)<sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>radians<sp/>*<sp/>(180.0<sp/>/<sp/><ref refid="fparser_8cpp_1ae71449b1cc6e6250b91f539153a7a0d3" kindref="member">M_PI</ref>);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996" refid="class_function_parser_1a8fe3538f4cd207346c390059ba334023" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a8fe3538f4cd207346c390059ba334023" kindref="member">FunctionParser::Eval</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>Vars)<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ByteCode<sp/>=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a113be528db3c02713aa9887732897f8d" kindref="member">ByteCode</ref>;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Immed<sp/>=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a5a1b2b3c4adaed1b098413547cc67ce3" kindref="member">Immed</ref>;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Stack<sp/>=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a1ba27ea1afffc0f361e4da36723caaa7" kindref="member">Stack</ref>;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ByteCodeSize<sp/>=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a6037b3f5d5d8854dfd9ec15b9ac0924f" kindref="member">ByteCodeSize</ref>;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>IP,<sp/>DP<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SP<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IP<sp/>=<sp/>0;<sp/>IP<sp/>&lt;<sp/>ByteCodeSize;<sp/>++IP)<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ByteCode[IP])<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Functions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104abe24afb7a517123bb376d7ea8eb64d44" kindref="member">cAbs</ref>:<sp/>Stack[SP]<sp/>=<sp/>fabs(Stack[SP]);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a8d1b04fbbe63761d3fcdb5abca743bda" kindref="member">cAcos</ref>:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Stack[SP]<sp/>&lt;<sp/>-1<sp/>||<sp/>Stack[SP]<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack[SP]<sp/>=<sp/>acos(Stack[SP]);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_ASINH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a2b0abcb3ec5d45970e8efb45b7ec52d1" kindref="member">cAcosh</ref>:<sp/>Stack[SP]<sp/>=<sp/>acosh(Stack[SP]);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a5cdf7b92a790ccaaff26c6c843ac960f" kindref="member">cAsin</ref>:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Stack[SP]<sp/>&lt;<sp/>-1<sp/>||<sp/>Stack[SP]<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack[SP]<sp/>=<sp/>asin(Stack[SP]);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_ASINH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a0730c6d32992bfd85aaacad6cc53262d" kindref="member">cAsinh</ref>:<sp/>Stack[SP]<sp/>=<sp/>asinh(Stack[SP]);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a98784402ea660463ff310c7099e452e4" kindref="member">cAtan</ref>:<sp/>Stack[SP]<sp/>=<sp/>atan(Stack[SP]);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a4352090ce78dee0e07fb5e05978efd33" kindref="member">cAtan2</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=<sp/>atan2(Stack[SP<sp/>-<sp/>1],<sp/>Stack[SP]);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_ASINH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104abcc41b4881e327850100d4d1d6b9b10a" kindref="member">cAtanh</ref>:<sp/>Stack[SP]<sp/>=<sp/>atanh(Stack[SP]);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a46e4b109440d8269a7cebb1471956996" kindref="member">cCeil</ref>:<sp/>Stack[SP]<sp/>=<sp/>ceil(Stack[SP]);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a696a68a214d10fe1d99e8a8f2455fb31" kindref="member">cCos</ref>:<sp/>Stack[SP]<sp/>=<sp/>cos(Stack[SP]);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a3fb844f94abb95cc1a8fa094afe9a605" kindref="member">cCosh</ref>:<sp/>Stack[SP]<sp/>=<sp/>cosh(Stack[SP]);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a5431180a1afb60f2f8137bf79e277774" kindref="member">cCot</ref>:</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>tan(Stack[SP]);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack[SP]<sp/>=<sp/>1<sp/>/<sp/>t;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104af071b49fa2edc878f19d08e923f41e37" kindref="member">cCsc</ref>:</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>sin(Stack[SP]);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack[SP]<sp/>=<sp/>1<sp/>/<sp/>s;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DISABLE_EVAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a1680bca790b8a0581045e71f8e8a27b4" kindref="member">cEval</ref>:</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_function_parser_1a5b75f74ce82219fc4aaf05665ab46034" kindref="member">evalRecursionLevel</ref><sp/>==<sp/><ref refid="fpconfig_8hpp_1a0950df179ac5b6f5945f00e565619943" kindref="member">EVAL_MAX_REC_LEVEL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref><sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a1ba27ea1afffc0f361e4da36723caaa7" kindref="member">Stack</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[<ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1afb5f715f8c45ce98b654cb169e656c8b" kindref="member">StackSize</ref>];</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="class_function_parser_1a5b75f74ce82219fc4aaf05665ab46034" kindref="member">evalRecursionLevel</ref>;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="class_function_parser_1a8fe3538f4cd207346c390059ba334023" kindref="member">Eval</ref>(&amp;Stack[SP<sp/>-<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1af882554224f4977d69c5593254ac210e" kindref="member">varAmount</ref><sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="class_function_parser_1a5b75f74ce82219fc4aaf05665ab46034" kindref="member">evalRecursionLevel</ref>;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a1ba27ea1afffc0f361e4da36723caaa7" kindref="member">Stack</ref>;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a1ba27ea1afffc0f361e4da36723caaa7" kindref="member">Stack</ref><sp/>=<sp/>Stack;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SP<sp/>-=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1af882554224f4977d69c5593254ac210e" kindref="member">varAmount</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack[SP]<sp/>=<sp/>retVal;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a12df36d67323b2026c46ef6d11881512" kindref="member">cExp</ref>:<sp/>Stack[SP]<sp/>=<sp/>exp(Stack[SP]);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ae198fdd6228f7b82893085e4df27521d" kindref="member">cFloor</ref>:<sp/>Stack[SP]<sp/>=<sp/>floor(Stack[SP]);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a9b633958b9e19a49d476dc215664ba99" kindref="member">cIf</ref>:</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>jumpAddr<sp/>=<sp/>ByteCode[++IP];</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>immedAddr<sp/>=<sp/>ByteCode[++IP];</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doubleToInt(Stack[SP])<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IP<sp/>=<sp/>jumpAddr;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DP<sp/>=<sp/>immedAddr;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a52572b7fdbf67c78a12034db98f8e016" kindref="member">cInt</ref>:<sp/>Stack[SP]<sp/>=<sp/>floor(Stack[SP]<sp/>+<sp/>.5);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104af97b6b6eddd36067673cd0a6ae92e038" kindref="member">cLog</ref>:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Stack[SP]<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack[SP]<sp/>=<sp/>log(Stack[SP]);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a6d1b7d9c85dc8d4ae73dfeac4a9c9900" kindref="member">cLog10</ref>:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Stack[SP]<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack[SP]<sp/>=<sp/>log10(Stack[SP]);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104aaa30b5cfcbcbf0da701d1aa9d93c34ca" kindref="member">cMax</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=<sp/>Max(Stack[SP<sp/>-<sp/>1],<sp/>Stack[SP]);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a3c52691129ec62e2a732946f19910054" kindref="member">cMin</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=<sp/>Min(Stack[SP<sp/>-<sp/>1],<sp/>Stack[SP]);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ab6a937aed33eb752cb4c5e0f02288977" kindref="member">cSec</ref>:</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>cos(Stack[SP]);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack[SP]<sp/>=<sp/>1<sp/>/<sp/>c;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a65a83ab967f2102842e90cb2755bd0dd" kindref="member">cSin</ref>:<sp/>Stack[SP]<sp/>=<sp/>sin(Stack[SP]);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a90157e1a55d7a1802ebd34dfae3a0cb2" kindref="member">cSinh</ref>:<sp/>Stack[SP]<sp/>=<sp/>sinh(Stack[SP]);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a4d42c36ec9ad74b388e54d2824483a44" kindref="member">cSqrt</ref>:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Stack[SP]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack[SP]<sp/>=<sp/>sqrt(Stack[SP]);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a81d600178a7abd46f8b21c3ec7c796e2" kindref="member">cTan</ref>:<sp/>Stack[SP]<sp/>=<sp/>tan(Stack[SP]);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ac8ee3677fb612511ff3fdf34871fa62d" kindref="member">cTanh</ref>:<sp/>Stack[SP]<sp/>=<sp/>tanh(Stack[SP]);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Misc:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a1b0b57507c1e59f6c0d1ed16294a5b85" kindref="member">cImmed</ref>:<sp/>Stack[++SP]<sp/>=<sp/>Immed[DP++];</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104accb8c0016ec35c3aadbf05d27862260a" kindref="member">cJump</ref>:<sp/>DP<sp/>=<sp/>ByteCode[IP<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IP<sp/>=<sp/>ByteCode[IP<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Operators:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104af1b190d07c3089e3bcafca4bc4bb6603" kindref="member">cNeg</ref>:<sp/>Stack[SP]<sp/>=<sp/>-Stack[SP];</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ab1e14fa6a928e36273aa17dfd4c42112" kindref="member">cAdd</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>+=<sp/>Stack[SP];</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a7153f64d6912f651f713e41618bafbe1" kindref="member">cSub</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>-=<sp/>Stack[SP];</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a973fc4ba1c6b35e6d97073100b8dbcb6" kindref="member">cMul</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>*=<sp/>Stack[SP];</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ab1f7ca90f0855acbdfcaae6bdbbf1f2e" kindref="member">cDiv</ref>:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Stack[SP]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack[SP<sp/>-<sp/>1]<sp/>/=<sp/>Stack[SP];</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a0f3f8d8f710afc26fc7fc29253323cf7" kindref="member">cMod</ref>:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Stack[SP]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack[SP<sp/>-<sp/>1]<sp/>=<sp/>fmod(Stack[SP<sp/>-<sp/>1],<sp/>Stack[SP]);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a07e80ec698466523ecc06b01abb75d13" kindref="member">cPow</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=<sp/>pow(Stack[SP<sp/>-<sp/>1],<sp/>Stack[SP]);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FP_EPSILON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a4cb3bd20217436052efdae1dcb98055b" kindref="member">cEqual</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fabs(Stack[SP<sp/>-<sp/>1]<sp/>-<sp/>Stack[SP])<sp/>&lt;=<sp/><ref refid="fpconfig_8hpp_1aae3eae17200b095d27f66dc860c3f688" kindref="member">FP_EPSILON</ref>);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104aba4ac6cefdd729a70a6d29aef951fccb" kindref="member">cNEqual</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fabs(Stack[SP<sp/>-<sp/>1]<sp/>-<sp/>Stack[SP])<sp/>&gt;=<sp/><ref refid="fpconfig_8hpp_1aae3eae17200b095d27f66dc860c3f688" kindref="member">FP_EPSILON</ref>);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ad410381169d9a04a053f380b6d579180" kindref="member">cLess</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=<sp/>(Stack[SP<sp/>-<sp/>1]<sp/>&lt;<sp/>Stack[SP]<sp/>-<sp/><ref refid="fpconfig_8hpp_1aae3eae17200b095d27f66dc860c3f688" kindref="member">FP_EPSILON</ref>);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ad0b627fa38703b87e3916018f49b3c1f" kindref="member">cLessOrEq</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=<sp/>(Stack[SP<sp/>-<sp/>1]<sp/>&lt;=<sp/>Stack[SP]<sp/>+<sp/><ref refid="fpconfig_8hpp_1aae3eae17200b095d27f66dc860c3f688" kindref="member">FP_EPSILON</ref>);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ad00c65b938f482b9bed4a0d97ad9255e" kindref="member">cGreater</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=<sp/>(Stack[SP<sp/>-<sp/>1]<sp/>-<sp/><ref refid="fpconfig_8hpp_1aae3eae17200b095d27f66dc860c3f688" kindref="member">FP_EPSILON</ref><sp/>&gt;<sp/>Stack[SP]);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a19a3bc252ef72d5f1d6c567b61ba1e17" kindref="member">cGreaterOrEq</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Stack[SP<sp/>-<sp/>1]<sp/>+<sp/><ref refid="fpconfig_8hpp_1aae3eae17200b095d27f66dc860c3f688" kindref="member">FP_EPSILON</ref><sp/>&gt;=<sp/>Stack[SP]);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a4cb3bd20217436052efdae1dcb98055b" kindref="member">cEqual</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=<sp/>(Stack[SP<sp/>-<sp/>1]<sp/>==<sp/>Stack[SP]);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104aba4ac6cefdd729a70a6d29aef951fccb" kindref="member">cNEqual</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=<sp/>(Stack[SP<sp/>-<sp/>1]<sp/>!=<sp/>Stack[SP]);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ad410381169d9a04a053f380b6d579180" kindref="member">cLess</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=<sp/>(Stack[SP<sp/>-<sp/>1]<sp/>&lt;<sp/>Stack[SP]);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ad0b627fa38703b87e3916018f49b3c1f" kindref="member">cLessOrEq</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=<sp/>(Stack[SP<sp/>-<sp/>1]<sp/>&lt;=<sp/>Stack[SP]);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ad00c65b938f482b9bed4a0d97ad9255e" kindref="member">cGreater</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=<sp/>(Stack[SP<sp/>-<sp/>1]<sp/>&gt;<sp/>Stack[SP]);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a19a3bc252ef72d5f1d6c567b61ba1e17" kindref="member">cGreaterOrEq</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=<sp/>(Stack[SP<sp/>-<sp/>1]<sp/>&gt;=<sp/>Stack[SP]);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104aee912331ff5ee86c753550c24e915778" kindref="member">cAnd</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(doubleToInt(Stack[SP<sp/>-<sp/>1])<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doubleToInt(Stack[SP]));</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ae6d77f072bbd99214e7b7c231e88f9fa" kindref="member">cOr</ref>:<sp/>Stack[SP<sp/>-<sp/>1]<sp/>=</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(doubleToInt(Stack[SP<sp/>-<sp/>1])<sp/>||</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doubleToInt(Stack[SP]));</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SP;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a7cfdc457d05db1914d66750b2566947f" kindref="member">cNot</ref>:<sp/>Stack[SP]<sp/>=<sp/>!doubleToInt(Stack[SP]);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Degrees-radians<sp/>conversion:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a16cd2bcb30ffc27362bdb0f4172254e2" kindref="member">cDeg</ref>:<sp/>Stack[SP]<sp/>=<sp/>RadiansToDegrees(Stack[SP]);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a21d098255e6ea84b48d7a94f0319c0b7" kindref="member">cRad</ref>:<sp/>Stack[SP]<sp/>=<sp/>DegreesToRadians(Stack[SP]);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>User-defined<sp/>function<sp/>calls:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a8018524cbd1d4e0a8b2b4c4442655370" kindref="member">cFCall</ref>:</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>ByteCode[++IP];</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>params<sp/>=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a1ba8025daa062d7eef15b95a49c4607f" kindref="member">FuncPtrs</ref>[index].params;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>retVal<sp/>=</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a1ba8025daa062d7eef15b95a49c4607f" kindref="member">FuncPtrs</ref>[index].ptr(&amp;Stack[SP<sp/>-<sp/>params<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SP<sp/>-=<sp/>int(params)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack[SP]<sp/>=<sp/>retVal;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ab0962786a90ce59720b55799039d6b27" kindref="member">cPCall</ref>:</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>ByteCode[++IP];</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>params<sp/>=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a29d036708b0524b8ff0ddd3e6248ef6f" kindref="member">FuncParsers</ref>[index]-&gt;data-&gt;varAmount;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>retVal<sp/>=</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a29d036708b0524b8ff0ddd3e6248ef6f" kindref="member">FuncParsers</ref>[index]-&gt;Eval(&amp;Stack[SP<sp/>-<sp/>params<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SP<sp/>-=<sp/>int(params)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack[SP]<sp/>=<sp/>retVal;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SUPPORT_OPTIMIZER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cVar:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Paranoia.<sp/>These<sp/>should<sp/>never<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cDup:<sp/>Stack[SP<sp/>+<sp/>1]<sp/>=<sp/>Stack[SP];</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++SP;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cInv:</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Stack[SP]<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack[SP]<sp/>=<sp/>1.0<sp/>/<sp/>Stack[SP];</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Variables:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack[++SP]<sp/>=<sp/>Vars[ByteCode[IP]<sp/>-<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a921e5415a35e6f4b55518ededca97cba" kindref="member">VarBegin</ref>];</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1a43c35628fcb4a11d459e48265eca45df" kindref="member">evalErrorType</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Stack[SP];</highlight></codeline>
<codeline lineno="1295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FUNCTIONPARSER_SUPPORT_DEBUG_OUTPUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printHex(std::ostream&amp;<sp/>dest,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest.width(8);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest.fill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hex(dest);<sp/></highlight><highlight class="comment">//uppercase(dest);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>&lt;&lt;<sp/>n;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FunctionParser::PrintByteCode(std::ostream&amp;<sp/>dest)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ByteCode<sp/>=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a113be528db3c02713aa9887732897f8d" kindref="member">ByteCode</ref>;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Immed<sp/>=<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a5a1b2b3c4adaed1b098413547cc67ce3" kindref="member">Immed</ref>;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>IP<sp/>=<sp/>0,<sp/>DP<sp/>=<sp/>0;<sp/>IP<sp/>&lt;<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a6037b3f5d5d8854dfd9ec15b9ac0924f" kindref="member">ByteCodeSize</ref>;<sp/>++IP)<sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printHex(dest,<sp/>IP);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>opcode<sp/>=<sp/>ByteCode[IP];</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(opcode)<sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a9b633958b9e19a49d476dc215664ba99" kindref="member">cIf</ref>:</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;jz\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printHex(dest,<sp/>ByteCode[IP<sp/>+<sp/>1]<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IP<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104accb8c0016ec35c3aadbf05d27862260a" kindref="member">cJump</ref>:</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;jump\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printHex(dest,<sp/>ByteCode[IP<sp/>+<sp/>1]<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IP<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a1b0b57507c1e59f6c0d1ed16294a5b85" kindref="member">cImmed</ref>:</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest.precision(10);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;push\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Immed[DP++]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a8018524cbd1d4e0a8b2b4c4442655370" kindref="member">cFCall</ref>:</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>ByteCode[++IP];</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data::VarMap_t::const_iterator<sp/>iter<sp/>=</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1aca8bc3c4c9840a4ce7fc75a6fb6d0e61" kindref="member">FuncPtrNames</ref>.begin();</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iter-&gt;second<sp/>!=<sp/>index)<sp/>++iter;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;fcall\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iter-&gt;first</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a1ba8025daa062d7eef15b95a49c4607f" kindref="member">FuncPtrs</ref>[index].params<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ab0962786a90ce59720b55799039d6b27" kindref="member">cPCall</ref>:</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>ByteCode[++IP];</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data::VarMap_t::const_iterator<sp/>iter<sp/>=</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1ac552328a6854b174a7d085d9df0c8943" kindref="member">FuncParserNames</ref>.begin();</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iter-&gt;second<sp/>!=<sp/>index)<sp/>++iter;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;pcall\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iter-&gt;first</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_function_parser_1ac4c90e783d1a41f8f842383a9a5088d0" kindref="member">data</ref>-&gt;<ref refid="struct_function_parser_1_1_data_1a29d036708b0524b8ff0ddd3e6248ef6f" kindref="member">FuncParsers</ref>[index]-&gt;data-&gt;varAmount</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opcode<sp/>&lt;<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a921e5415a35e6f4b55518ededca97cba" kindref="member">VarBegin</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>params<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(opcode)<sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104af1b190d07c3089e3bcafca4bc4bb6603" kindref="member">cNeg</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;neg&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ab1e14fa6a928e36273aa17dfd4c42112" kindref="member">cAdd</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;add&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a7153f64d6912f651f713e41618bafbe1" kindref="member">cSub</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;sub&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a973fc4ba1c6b35e6d97073100b8dbcb6" kindref="member">cMul</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;mul&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ab1f7ca90f0855acbdfcaae6bdbbf1f2e" kindref="member">cDiv</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;div&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a0f3f8d8f710afc26fc7fc29253323cf7" kindref="member">cMod</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;mod&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a07e80ec698466523ecc06b01abb75d13" kindref="member">cPow</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;pow&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a4cb3bd20217436052efdae1dcb98055b" kindref="member">cEqual</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;eq&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104aba4ac6cefdd729a70a6d29aef951fccb" kindref="member">cNEqual</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;neq&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ad410381169d9a04a053f380b6d579180" kindref="member">cLess</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lt&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ad0b627fa38703b87e3916018f49b3c1f" kindref="member">cLessOrEq</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;le&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ad00c65b938f482b9bed4a0d97ad9255e" kindref="member">cGreater</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;gt&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a19a3bc252ef72d5f1d6c567b61ba1e17" kindref="member">cGreaterOrEq</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ge&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104aee912331ff5ee86c753550c24e915778" kindref="member">cAnd</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;and&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104ae6d77f072bbd99214e7b7c231e88f9fa" kindref="member">cOr</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;or&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a7cfdc457d05db1914d66750b2566947f" kindref="member">cNot</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;not&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a16cd2bcb30ffc27362bdb0f4172254e2" kindref="member">cDeg</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;deg&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a21d098255e6ea84b48d7a94f0319c0b7" kindref="member">cRad</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rad&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DISABLE_EVAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a1680bca790b8a0581045e71f8e8a27b4" kindref="member">cEval</ref>:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;call\t0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SUPPORT_OPTIMIZER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cVar:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;(var)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cDup:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dup&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cInv:<sp/>n<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;inv&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1ae97b87cd905b84d3808b4268dcbf38cb" kindref="member">Functions</ref>[opcode<sp/>-<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104abe24afb7a517123bb376d7ea8eb64d44" kindref="member">cAbs</ref>].<ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition_1a6871458a853f321b0f566775d5c5d79c" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params<sp/>=<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1ae97b87cd905b84d3808b4268dcbf38cb" kindref="member">Functions</ref>[opcode<sp/>-<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104abe24afb7a517123bb376d7ea8eb64d44" kindref="member">cAbs</ref>].<ref refid="struct_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1_1_func_definition_1a023b73dfd337217c13d90f6498700094" kindref="member">params</ref>;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>&lt;&lt;<sp/>n;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(params<sp/>!=<sp/>1)<sp/>dest<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>params<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;push\tVar&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>opcode<sp/>-<sp/><ref refid="namespace_f_u_n_c_t_i_o_n_p_a_r_s_e_r_t_y_p_e_s_1aa8e540de01c96313b7e301c7b0d24104a921e5415a35e6f4b55518ededca97cba" kindref="member">VarBegin</ref><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SUPPORT_OPTIMIZER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437" refid="class_function_parser_1a8f09d400c39a72c7485d26cbff2543c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a8f09d400c39a72c7485d26cbff2543c9" kindref="member">FunctionParser::MakeTree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight></codeline>
<codeline lineno="1440" refid="class_function_parser_1a5466523ee5198fb4b38461b362b1481d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_function_parser_1a5466523ee5198fb4b38461b362b1481d" kindref="member">FunctionParser::Optimize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>nothing<sp/>if<sp/>no<sp/>optimizations<sp/>are<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/filip/PhD/WDFPipe_test/p4TSA/src/fparser.cpp"/>
  </compounddef>
</doxygen>

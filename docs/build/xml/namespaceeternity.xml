<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceeternity" kind="namespace" language="C++">
    <compoundname>eternity</compoundname>
    <innerclass refid="classeternity_1_1archive" prot="public">eternity::archive</innerclass>
    <innerclass refid="structeternity_1_1association" prot="public">eternity::association</innerclass>
    <innerclass refid="classeternity_1_1bin__archive" prot="public">eternity::bin_archive</innerclass>
    <innerclass refid="classeternity_1_1exception" prot="public">eternity::exception</innerclass>
    <innerclass refid="classeternity_1_1factory" prot="public">eternity::factory</innerclass>
    <innerclass refid="classeternity_1_1file__archive" prot="public">eternity::file_archive</innerclass>
    <innerclass refid="classeternity_1_1_ifactory" prot="public">eternity::Ifactory</innerclass>
    <innerclass refid="classeternity_1_1node" prot="public">eternity::node</innerclass>
    <innerclass refid="structeternity_1_1objects" prot="public">eternity::objects</innerclass>
    <innerclass refid="structeternity_1_1pointers" prot="public">eternity::pointers</innerclass>
    <innerclass refid="structeternity_1_1primitives" prot="public">eternity::primitives</innerclass>
    <innerclass refid="structeternity_1_1sequence" prot="public">eternity::sequence</innerclass>
    <innerclass refid="classeternity_1_1xml__archive" prot="public">eternity::xml_archive</innerclass>
    <innerclass refid="classeternity_1_1xml__scanner" prot="public">eternity::xml_scanner</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceeternity_1a839ed28b40afacc8ece1c9198aff5117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
          <param>
            <type>class CollectionCategory</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eternity::xml_write</definition>
        <argsstring>(CollectionCategory, InputIterator first, InputIterator last, xml_archive &amp;archive, std::string label)</argsstring>
        <name>xml_write</name>
        <param>
          <type>CollectionCategory</type>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="classeternity_1_1xml__archive" kindref="compound">xml_archive</ref> &amp;</type>
          <declname>archive</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pass to this function the container to persist with informtion about it&apos;s nature (sequence or associative) and the type of items collected ( primitives, objects or pointers). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/algorithms.hpp" line="313" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/algorithms.hpp" bodystart="313" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeternity_1acbfdd0b95d15efaa347565f99effa8c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class InputIterator</type>
          </param>
          <param>
            <type>class CollectionCategory</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eternity::xml_read</definition>
        <argsstring>(CollectionCategory, Container &amp;container, InputIterator inserter, xml_archive &amp;archive, std::string label)</argsstring>
        <name>xml_read</name>
        <param>
          <type>CollectionCategory</type>
        </param>
        <param>
          <type>Container &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>inserter</declname>
        </param>
        <param>
          <type><ref refid="classeternity_1_1xml__archive" kindref="compound">xml_archive</ref> &amp;</type>
          <declname>archive</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/algorithms.hpp" line="334" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/algorithms.hpp" bodystart="334" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeternity_1a60ba54c971ad5c7de37fa57de8b3fd4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
          <param>
            <type>class CollectionCategory</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eternity::binary_write</definition>
        <argsstring>(CollectionCategory, InputIterator first, InputIterator last, bin_archive &amp;archive)</argsstring>
        <name>binary_write</name>
        <param>
          <type>CollectionCategory</type>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="classeternity_1_1bin__archive" kindref="compound">bin_archive</ref> &amp;</type>
          <declname>archive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/algorithms.hpp" line="353" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/algorithms.hpp" bodystart="353" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeternity_1a4bd77f03b6e8ea105a1b7a8d4e245fbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class InputIterator</type>
          </param>
          <param>
            <type>class CollectionCategory</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eternity::binary_read</definition>
        <argsstring>(CollectionCategory, Container &amp;container, InputIterator inserter, bin_archive &amp;archive)</argsstring>
        <name>binary_read</name>
        <param>
          <type>CollectionCategory</type>
        </param>
        <param>
          <type>Container &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>inserter</declname>
        </param>
        <param>
          <type><ref refid="classeternity_1_1bin__archive" kindref="compound">bin_archive</ref> &amp;</type>
          <declname>archive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/algorithms.hpp" line="368" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/algorithms.hpp" bodystart="368" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeternity_1a5f792170a26f719b53ffeb502cdd2344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eternity::get_conventional_name</definition>
        <argsstring>(std::string compiler_name)</argsstring>
        <name>get_conventional_name</name>
        <param>
          <type>std::string</type>
          <declname>compiler_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search over all register facotry to found the conventional name of a class that the compiler identified with compiler_name. Otherwise return an empty string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.cpp" line="28" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.cpp" bodystart="28" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeternity_1a18dc40145658dda3be79014257e1176b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class t</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eternity::create</definition>
        <argsstring>(std::string cls_name, t **ppObj)</argsstring>
        <name>create</name>
        <param>
          <type>std::string</type>
          <declname>cls_name</declname>
        </param>
        <param>
          <type>t **</type>
          <declname>ppObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function return a pointer to an object that belong to the class specified by the string cls_name. If success put in *ppObj that pointer, otherwise put a NULL value in *ppObj. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.hpp" line="155" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/dynamic.hpp" bodystart="155" bodyend="164"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/algorithms.hpp" line="36" column="1"/>
  </compounddef>
</doxygen>

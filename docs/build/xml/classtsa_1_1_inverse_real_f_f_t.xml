<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtsa_1_1_inverse_real_f_f_t" kind="class" language="C++" prot="public">
    <compoundname>tsa::InverseRealFFT</compoundname>
    <basecompoundref refid="classtsa_1_1_base_f_f_t" prot="public" virt="non-virtual">tsa::BaseFFT</basecompoundref>
    <includes refid="_inverse_real_f_f_t_8hpp" local="no">InverseRealFFT.hpp</includes>
      <sectiondef kind="user-defined">
      <header>Operations</header>
      <memberdef kind="function" id="classtsa_1_1_inverse_real_f_f_t_1a619333f55b1526e03169c9c8be29d442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::InverseRealFFT::operator()</definition>
        <argsstring>(SeqViewComplex &amp;in, SeqViewDouble &amp;out)</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespacetsa_1ab32775c889b53c40fa83939f22372b75" kindref="member">SeqViewComplex</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacetsa_1ac599574bcc094eda25613724b8f3ca9e" kindref="member">SeqViewDouble</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply the transformation on the data</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to the buffer containing the input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to the buffer containing the input data</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to this instance of the class </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/InverseRealFFT.hpp" line="104" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/src/InverseRealFFT.cpp" bodystart="47" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_inverse_real_f_f_t_1ac37c11d801f396360818a54dddf1c9d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::InverseRealFFT::execute</definition>
        <argsstring>(Cmatrix &amp;in, Dmatrix &amp;out)</argsstring>
        <name>execute</name>
        <param>
          <type><ref refid="namespacetsa_1a86348fef1603a135fe5fba9e5f5486ee" kindref="member">Cmatrix</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacetsa_1ad260cd21c1891c4ed391fe788569aba4" kindref="member">Dmatrix</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <exceptions> throw (<ref refid="classtsa_1_1bad__matrix__size" kindref="compound">bad_matrix_size</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execution of the inverse real fft of a multichannel buffer of complex. Input data are organized in a matrix. Each row is a different channel, and the number of data to transform is equal to the number of columns. Both the number of rows and the number of columns can change between each call to this method. If the number of rows changes nothing special will happen, if the number of cols changes the plan is reevaluated with the current flags.</para><para><simplesect kind="pre"><para>The number of rows of input and output matrix must be the same. </para></simplesect>
<simplesect kind="pre"><para>The number of columns of the input matrix must be int(n/2)+1, where n is the number of columns of the output matrix.</para></simplesect>
<simplesect kind="post"><para>the input buffer is changed, unless <ref refid="classtsa_1_1_base_f_f_t_1a5b1e2f36dbdfe197aa6c74d1cf963f40" kindref="member">SetPreserveInput</ref> was called with true argument </para></simplesect>
<simplesect kind="post"><para>the output buffer contain the inverse fft of the input data </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classtsa_1_1bad__matrix__size" kindref="compound">bad_matrix_size</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the output matrix is wrong</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to the input multichannel buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to the output multichannel buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/InverseRealFFT.hpp" line="127" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/src/InverseRealFFT.cpp" bodystart="21" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_inverse_real_f_f_t_1a2693642ff2282921710456dea0915b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::InverseRealFFT::execute</definition>
        <argsstring>(Cvector &amp;in, Dvector &amp;out)</argsstring>
        <name>execute</name>
        <param>
          <type><ref refid="namespacetsa_1a054d1045ead95a65819e9e5722baf600" kindref="member">Cvector</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacetsa_1a8900fb03d849baf447a1a0efe2561fb2" kindref="member">Dvector</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <exceptions> throw (<ref refid="classtsa_1_1bad__vector__size" kindref="compound">bad_vector_size</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execution of the inverse real fft of a buffer of complex. If the number of data changes the plan is reevaluated with the current flags.</para><para><simplesect kind="pre"><para>The number of columns of the input matrix must be int(n/2)+1, where n is the number of columns of the output matrix.</para></simplesect>
<simplesect kind="post"><para>the input buffer is changed, unless <ref refid="classtsa_1_1_base_f_f_t_1a5b1e2f36dbdfe197aa6c74d1cf963f40" kindref="member">SetPreserveInput</ref> was called with true argument </para></simplesect>
<simplesect kind="post"><para>the output buffer contain the inverse fft of the input data </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classtsa_1_1bad__vector__size" kindref="compound">bad_vector_size</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the output vector</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to the output vector </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/InverseRealFFT.hpp" line="145" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/src/InverseRealFFT.cpp" bodystart="69" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_inverse_real_f_f_t_1aaa4b1dd80a308eb09a9dc9fe1aeba51e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::InverseRealFFT::execute</definition>
        <argsstring>(CmatrixRow &amp;in, DmatrixRow &amp;out)</argsstring>
        <name>execute</name>
        <param>
          <type><ref refid="namespacetsa_1ad294f56c16152a1618cbe2f19b768e2e" kindref="member">CmatrixRow</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacetsa_1aeaf3be962a114beef3d9e89b0fb49bf4" kindref="member">DmatrixRow</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <exceptions> throw (<ref refid="classtsa_1_1bad__vector__size" kindref="compound">bad_vector_size</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/InverseRealFFT.hpp" line="147" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/src/InverseRealFFT.cpp" bodystart="88" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_inverse_real_f_f_t_1a6264c0d0b0b4a31e584a390b06281631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::InverseRealFFT::execute</definition>
        <argsstring>(CmatrixRow &amp;in, DmatrixRow &amp;out, unsigned int insize)</argsstring>
        <name>execute</name>
        <param>
          <type><ref refid="namespacetsa_1ad294f56c16152a1618cbe2f19b768e2e" kindref="member">CmatrixRow</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacetsa_1aeaf3be962a114beef3d9e89b0fb49bf4" kindref="member">DmatrixRow</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>insize</declname>
        </param>
        <exceptions> throw (<ref refid="classtsa_1_1bad__vector__size" kindref="compound">bad_vector_size</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/InverseRealFFT.hpp" line="149" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/src/InverseRealFFT.cpp" bodystart="107" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_inverse_real_f_f_t_1ae5b45701f989efce89c6c336ec78c189" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void tsa::InverseRealFFT::MakePlan</definition>
        <argsstring>()</argsstring>
        <name>MakePlan</name>
        <reimplements refid="classtsa_1_1_base_f_f_t_1a9af0c36413173821cac8dbdce9cfe3b4">MakePlan</reimplements>
        <exceptions> throw (std::runtime_error)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make a new plan, with the current parameters.</para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>The new plan cannot be created </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/InverseRealFFT.hpp" line="157" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/src/InverseRealFFT.cpp" bodystart="130" bodyend="145"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtsa_1_1_inverse_real_f_f_t_1a50258b4d4596d93935791135cd22feb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tsa::InverseRealFFT::InverseRealFFT</definition>
        <argsstring>(int size=0, enum FFTPlanningMode mode=ESTIMATE, bool PreserveInput=false)</argsstring>
        <name>InverseRealFFT</name>
        <param>
          <type>int</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>enum <ref refid="namespacetsa_1a217e07ef78939f88b22c8428ac96b1ae" kindref="member">FFTPlanningMode</ref></type>
          <declname>mode</declname>
          <defval><ref refid="namespacetsa_1a217e07ef78939f88b22c8428ac96b1aea2762be66fb6f3e4772c7f4cc162b9750" kindref="member">ESTIMATE</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>PreserveInput</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the transform </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>specify the way in which plans are calculated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PreserveInput</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the input buffer must be preserved during the transform, false otherwise </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/InverseRealFFT.hpp" line="75" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/src/InverseRealFFT.cpp" bodystart="5" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_inverse_real_f_f_t_1a5a9e17eaf4fd69e719dca4b881010876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tsa::InverseRealFFT::InverseRealFFT</definition>
        <argsstring>(const InverseRealFFT &amp;from)</argsstring>
        <name>InverseRealFFT</name>
        <param>
          <type>const <ref refid="classtsa_1_1_inverse_real_f_f_t" kindref="compound">InverseRealFFT</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The instance that must be copied </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/InverseRealFFT.hpp" line="82" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/src/InverseRealFFT.cpp" bodystart="11" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_inverse_real_f_f_t_1a928e08fb19e46a901e0dc42ec5970801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tsa::InverseRealFFT::~InverseRealFFT</definition>
        <argsstring>()</argsstring>
        <name>~InverseRealFFT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/InverseRealFFT.hpp" line="87" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/src/InverseRealFFT.cpp" bodystart="17" bodyend="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Multichannel inverse real to complex FFT. </para>    </briefdescription>
    <detaileddescription>
<para>This is the implementation of the FFT of a real multichannel buffer </para>    </detaileddescription>
    <inheritancegraph>
      <node id="288">
        <label>tsa::InverseRealFFT</label>
        <link refid="classtsa_1_1_inverse_real_f_f_t"/>
        <childnode refid="289" relation="public-inheritance">
        </childnode>
      </node>
      <node id="289">
        <label>tsa::BaseFFT</label>
        <link refid="classtsa_1_1_base_f_f_t"/>
        <childnode refid="290" relation="public-inheritance">
        </childnode>
      </node>
      <node id="290">
        <label>tsa::AlgoBase</label>
        <link refid="classtsa_1_1_algo_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="291">
        <label>tsa::InverseRealFFT</label>
        <link refid="classtsa_1_1_inverse_real_f_f_t"/>
        <childnode refid="292" relation="public-inheritance">
        </childnode>
      </node>
      <node id="292">
        <label>tsa::BaseFFT</label>
        <link refid="classtsa_1_1_base_f_f_t"/>
        <childnode refid="293" relation="public-inheritance">
        </childnode>
      </node>
      <node id="293">
        <label>tsa::AlgoBase</label>
        <link refid="classtsa_1_1_algo_base"/>
      </node>
    </collaborationgraph>
    <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/InverseRealFFT.hpp" line="66" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/InverseRealFFT.hpp" bodystart="66" bodyend="183"/>
    <listofallmembers>
      <member refid="classtsa_1_1_base_f_f_t_1a724f59f3f5bded31174373eac81e67ee" prot="public" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>BaseFFT</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a84fa441e825a8e375f9721263d358ac8" prot="public" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>BaseFFT</name></member>
      <member refid="classtsa_1_1_inverse_real_f_f_t_1ac37c11d801f396360818a54dddf1c9d1" prot="public" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>execute</name></member>
      <member refid="classtsa_1_1_inverse_real_f_f_t_1a2693642ff2282921710456dea0915b40" prot="public" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>execute</name></member>
      <member refid="classtsa_1_1_inverse_real_f_f_t_1aaa4b1dd80a308eb09a9dc9fe1aeba51e" prot="public" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>execute</name></member>
      <member refid="classtsa_1_1_inverse_real_f_f_t_1a6264c0d0b0b4a31e584a390b06281631" prot="public" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>execute</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a7069819e421ad4cb2a4c58f65c8540ea" prot="public" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>ForgetWisdom</name></member>
      <member refid="classtsa_1_1_inverse_real_f_f_t_1a50258b4d4596d93935791135cd22feb9" prot="public" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>InverseRealFFT</name></member>
      <member refid="classtsa_1_1_inverse_real_f_f_t_1a5a9e17eaf4fd69e719dca4b881010876" prot="public" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>InverseRealFFT</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a53ccc1ae425bb9f91adbd5562ecb9131" prot="public" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>LoadWisdomFromFile</name></member>
      <member refid="classtsa_1_1_inverse_real_f_f_t_1ae5b45701f989efce89c6c336ec78c189" prot="public" virt="virtual"><scope>tsa::InverseRealFFT</scope><name>MakePlan</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a171c71011fea314f23633b1816771d98" prot="protected" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>mLogicalSize</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a5c7dd6dee349547018d493be6d5874eb" prot="protected" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>mPlan</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1aa89fef1777c6df148cdb8533265b6163" prot="protected" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>mPlanNeedsUpdate</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a2fe7f53db024bb408beeb5e22eaefbb9" prot="protected" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>mPlanningRestriction</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1abbd656cda5a7cb6a88fc5d556d3269f7" prot="protected" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>mPlanningRigor</name></member>
      <member refid="classtsa_1_1_inverse_real_f_f_t_1a619333f55b1526e03169c9c8be29d442" prot="public" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>operator()</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a1f5332f508749018f0c6a58c9b1ed9dc" prot="public" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>SaveWisdomOnFile</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a4a8b00feb20dc3ace768d3c851143a03" prot="public" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>SetPlanningMode</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1a5b1e2f36dbdfe197aa6c74d1cf963f40" prot="public" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>SetPreserveInput</name></member>
      <member refid="classtsa_1_1_base_f_f_t_1ad73b78693c83ef6c7e07701965ae8cb6" prot="public" virt="virtual"><scope>tsa::InverseRealFFT</scope><name>~BaseFFT</name></member>
      <member refid="classtsa_1_1_inverse_real_f_f_t_1a928e08fb19e46a901e0dc42ec5970801" prot="public" virt="non-virtual"><scope>tsa::InverseRealFFT</scope><name>~InverseRealFFT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtsa_1_1_a_r_m_a_view" kind="class" language="C++" prot="public">
    <compoundname>tsa::ARMAView</compoundname>
    <basecompoundref refid="classtsa_1_1_base_view" prot="public" virt="non-virtual">tsa::BaseView</basecompoundref>
    <includes refid="_a_r_m_a_view_8hpp" local="no">ARMAView.hpp</includes>
      <sectiondef kind="user-defined">
      <header>Getters</header>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a1a6f6606b2c5c8d0ef7d1484538e57d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const double &amp;</type>
        <definition>const double&amp; tsa::ARMAView::GetAR</definition>
        <argsstring>(int i, unsigned int channel=0) const</argsstring>
        <name>GetAR</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method gives the value of the AR[i] coefficient for one of the channels. It is assumed that the VARMA process is diagonal, which means that there is and independent ARMA process for each channel.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the AR coefficient </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the AR[i] coefficient </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="241" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1ad1f9e11168b5fb4c62ce4afb81ed0c86" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const double &amp;</type>
        <definition>const double&amp; tsa::ARMAView::GetMA</definition>
        <argsstring>(int i, unsigned int channel=0) const</argsstring>
        <name>GetMA</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method gives the value of the MA[i] coefficient for one of the channels. It is assumed that the VARMA process is diagonal, which means that there is and independent ARMA process for each channel.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the MA coefficient </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the MA[i] coefficient </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="256" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="256" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a217094c2da79081413b74c8793dfbee3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const double &amp;</type>
        <definition>const double&amp; tsa::ARMAView::GetVAR</definition>
        <argsstring>(int i, unsigned int channel1, unsigned int channel2) const</argsstring>
        <name>GetVAR</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channel1</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channel2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method gives the value of the <formula id="2">$A^{(i)}_{jk}$</formula> coefficient for the VARMA process</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the VAR coefficient </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first channel (index j) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel2</parametername>
</parameternamelist>
<parameterdescription>
<para>the se channel (index k)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the coefficient <formula id="2">$A^{(i)}_{jk}$</formula> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="269" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="269" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a60f3835003f645ba1947e34e08e58a27" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const double &amp;</type>
        <definition>const double&amp; tsa::ARMAView::GetVMA</definition>
        <argsstring>(int i, unsigned int channel1, unsigned int channel2) const</argsstring>
        <name>GetVMA</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channel1</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channel2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method gives the value of the <formula id="3">$B^{(i)}_{jk}$</formula> coefficient for the VARMA process</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the VMA coefficient </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first channel (index j) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel2</parametername>
</parameternamelist>
<parameterdescription>
<para>the se channel (index k)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the coefficient <formula id="3">$B^{(i)}_{jk}$</formula> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="282" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="282" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a022eacefccd6be3b5efa36b656295206" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int tsa::ARMAView::GetArOrder</definition>
        <argsstring>() const</argsstring>
        <name>GetArOrder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the order of the AR part of the process.</para><para><simplesect kind="return"><para>the order of the AR part of the process </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="293" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="293" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a50b9c68a7cafc52b47a35b11301d3adb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int tsa::ARMAView::GetMaOrder</definition>
        <argsstring>() const</argsstring>
        <name>GetMaOrder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the order of the MA part of the process.</para><para><simplesect kind="return"><para>the order of the MA part of the process </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="303" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="303" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a9a45f52a936aa86414c5afb43592f98e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int tsa::ARMAView::GetChannels</definition>
        <argsstring>() const</argsstring>
        <name>GetChannels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the dimension of the VARMA process.</para><para><simplesect kind="return"><para>the dimension of the VARMA process </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="313" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="313" bodyend="315"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Setters</header>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1ae1b0323b27d5c8ad4a9e43a0119c407a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::ARMAView::SetAR</definition>
        <argsstring>(int i, double v, unsigned int channel=0)</argsstring>
        <name>SetAR</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method sets the value of the AR[i] coefficient for one of the channels. It is assumed that the VARMA process is diagonal, which means that there is and independent ARMA process for each channel.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the AR part </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the new value of AR[i] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="334" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="334" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a0fb548001ea80ac198ecf5619090320e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::ARMAView::SetMA</definition>
        <argsstring>(int i, double v, unsigned int channel=0)</argsstring>
        <name>SetMA</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method sets the value of the MA[i] coefficient for one of the channels. It is assumed that the VARMA process is diagonal, which means that there is and independent ARMA process for each channel.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the MA part </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the new value of MA[i] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="347" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="347" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a75a22d6966763cdba5788303a3fe3e7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::ARMAView::SetVAR</definition>
        <argsstring>(int i, double v, unsigned int channel1, unsigned int channel2)</argsstring>
        <name>SetVAR</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channel1</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channel2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method sets the value of the <formula id="2">$A^{(i)}_{jk}$</formula> coefficient for the VARMA process</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the VAR coefficient </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the new value of <formula id="2">$A^{(i)}_{jk}$</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first channel (index j) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel2</parametername>
</parameternamelist>
<parameterdescription>
<para>the se channel (index k) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="361" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="361" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a3cebaae08e5718c57fb234c414904bc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::ARMAView::SetVMA</definition>
        <argsstring>(int i, double v, unsigned int channel1, unsigned int channel2)</argsstring>
        <name>SetVMA</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channel1</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channel2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method sets the value of the <formula id="3">$B^{(i)}_{jk}$</formula> coefficient for the VARMA process</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the VAR coefficient </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the new value of <formula id="3">$B^{(i)}_{jk}$</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first channel (index j) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel2</parametername>
</parameternamelist>
<parameterdescription>
<para>the se channel (index k) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="375" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="375" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a192fe1e105780bc26cae74f51bc54597" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::ARMAView::SetOrder</definition>
        <argsstring>(unsigned int maxP, unsigned int maxQ)</argsstring>
        <name>SetOrder</name>
        <param>
          <type>unsigned int</type>
          <declname>maxP</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>maxQ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This methods sets the order (p,q) of the (V)ARMA process</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maxP</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the AR part of the process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxQ</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the MA part of the process </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="386" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="386" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a14f528f407a13473a7c20a0d7dec6482" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::ARMAView::SetChannels</definition>
        <argsstring>(unsigned int channels)</argsstring>
        <name>SetChannels</name>
        <param>
          <type>unsigned int</type>
          <declname>channels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method sets the dimension of the VARMA process</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>the dimension of the VARMA process </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="399" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="399" bodyend="405"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtsa_1_1_a_r_m_a_view_1a0e95f26e07907a39ddb0e67b26fbc3ea" prot="private" static="no" mutable="no">
        <type><ref refid="namespacetsa_1a6dd7105c3202ef00a213d7c029f5b248" kindref="member">VDmatrix</ref></type>
        <definition>VDmatrix tsa::ARMAView::mAR</definition>
        <argsstring></argsstring>
        <name>mAR</name>
        <briefdescription>
<para>The AR part of the process. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="448" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtsa_1_1_a_r_m_a_view_1a420b5083584d78e4bb7f5db8b3e62bc3" prot="private" static="no" mutable="no">
        <type><ref refid="namespacetsa_1a6dd7105c3202ef00a213d7c029f5b248" kindref="member">VDmatrix</ref></type>
        <definition>VDmatrix tsa::ARMAView::mMA</definition>
        <argsstring></argsstring>
        <name>mMA</name>
        <briefdescription>
<para>The MA part of the process. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="449" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtsa_1_1_a_r_m_a_view_1a0101f02d2c9f5eb2a6e6f1e1191fdb40" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int tsa::ARMAView::mChannels</definition>
        <argsstring></argsstring>
        <name>mChannels</name>
        <briefdescription>
<para>The dimension of the VARMA process. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="450" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="450" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a6b11811890252e645626e61fe434ea56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tsa::ARMAView::ARMAView</definition>
        <argsstring>(unsigned int maxP, unsigned int maxQ, int channels=1)</argsstring>
        <name>ARMAView</name>
        <param>
          <type>unsigned int</type>
          <declname>maxP</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>maxQ</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channels</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maxP</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the AR part </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxQ</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the MA part </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>the dimension of </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="92" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="92" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a1f28a41958cdf03016ffbae033a222bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tsa::ARMAView::ARMAView</definition>
        <argsstring>(const ARMAView &amp;from)</argsstring>
        <name>ARMAView</name>
        <param>
          <type>const <ref refid="classtsa_1_1_a_r_m_a_view" kindref="compound">ARMAView</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The instance that must be copied </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="106" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="106" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a44779ce53323f8e6a1457974e9242004" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tsa::ARMAView::~ARMAView</definition>
        <argsstring>()</argsstring>
        <name>~ARMAView</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="119" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="119" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1aa6144eb86771f2c9d2cc95ac415acaba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::ARMAView::Load</definition>
        <argsstring>(const char *filename, const char *fmt=&quot;txt&quot;)</argsstring>
        <name>Load</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
          <defval>&quot;txt&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="122" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="122" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a022ef32e6b0c2012707317cf1fbf9a54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::ARMAView::Save</definition>
        <argsstring>(const char *filename, const char *fmt=&quot;txt&quot;)</argsstring>
        <name>Save</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
          <defval>&quot;txt&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="129" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="129" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1ac667fd050280837056f3397fdb21afe6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::ARMAView::xml_serialize</definition>
        <argsstring>(eternity::xml_archive &amp;xml, const char *prefix)</argsstring>
        <name>xml_serialize</name>
        <param>
          <type><ref refid="classeternity_1_1xml__archive" kindref="compound">eternity::xml_archive</ref> &amp;</type>
          <declname>xml</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="136" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="136" bodyend="223"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a9fdd9c921d39b10a4d83379f69bdb160" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::ARMAView::ResizeAR</definition>
        <argsstring>(unsigned int order)</argsstring>
        <name>ResizeAR</name>
        <param>
          <type>unsigned int</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method change the order of the AR part of the process</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>the new order of the AR part </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="420" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="420" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classtsa_1_1_a_r_m_a_view_1a757cddd07c0bb5bf0c4a8784e79f5900" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tsa::ARMAView::ResizeMA</definition>
        <argsstring>(unsigned int order)</argsstring>
        <name>ResizeMA</name>
        <param>
          <type>unsigned int</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method change the order of the MA part of the process</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>the new order of the MA part </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="437" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="437" bodyend="446"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>ARMA view: container for (vectorial) ARMA processes. </para>    </briefdescription>
    <detaileddescription>
<para>A view for ARMA parametrization. It defines a general (V)ARMA process, which can be written as <formula id="0">\[ \sum_{k=0}^{p} A^{(k)} \vec{y}_{n-k} = \sum_{k=0}^{q} B^{(k)} \vec{x}_{n-k} \]</formula> where A,B are square matrix of dimension d equal to the dimension of the input and output vectors x,y. If the order of the part MA q is equal to zero the process is an AR process. If the order of the AR part p is equal to zero the process is an MA process. Note that the matrix <formula id="1">$A^{(0)}$</formula> is assumed to be the identity. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="96">
        <label>tsa::ARMAView</label>
        <link refid="classtsa_1_1_a_r_m_a_view"/>
        <childnode refid="97" relation="public-inheritance">
        </childnode>
      </node>
      <node id="97">
        <label>tsa::BaseView</label>
        <link refid="classtsa_1_1_base_view"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="98">
        <label>tsa::ARMAView</label>
        <link refid="classtsa_1_1_a_r_m_a_view"/>
        <childnode refid="99" relation="public-inheritance">
        </childnode>
      </node>
      <node id="99">
        <label>tsa::BaseView</label>
        <link refid="classtsa_1_1_base_view"/>
      </node>
    </collaborationgraph>
    <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" line="83" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/ARMAView.hpp" bodystart="83" bodyend="452"/>
    <listofallmembers>
      <member refid="classtsa_1_1_a_r_m_a_view_1a6b11811890252e645626e61fe434ea56" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>ARMAView</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a1f28a41958cdf03016ffbae033a222bb" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>ARMAView</name></member>
      <member refid="classtsa_1_1_base_view_1a87ba8f0c139190b95f8b1c5486b342d1" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>BaseView</name></member>
      <member refid="classtsa_1_1_base_view_1a21d825daa5ede62830f69e0ea7275008" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>BaseView</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a1a6f6606b2c5c8d0ef7d1484538e57d3" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>GetAR</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a022eacefccd6be3b5efa36b656295206" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>GetArOrder</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a9a45f52a936aa86414c5afb43592f98e" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>GetChannels</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1ad1f9e11168b5fb4c62ce4afb81ed0c86" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>GetMA</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a50b9c68a7cafc52b47a35b11301d3adb" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>GetMaOrder</name></member>
      <member refid="classtsa_1_1_base_view_1ac6e0354eb1ec24205ff893440ff561b9" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>GetName</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a217094c2da79081413b74c8793dfbee3" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>GetVAR</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a60f3835003f645ba1947e34e08e58a27" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>GetVMA</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1aa6144eb86771f2c9d2cc95ac415acaba" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>Load</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a0e95f26e07907a39ddb0e67b26fbc3ea" prot="private" virt="non-virtual"><scope>tsa::ARMAView</scope><name>mAR</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a0101f02d2c9f5eb2a6e6f1e1191fdb40" prot="private" virt="non-virtual"><scope>tsa::ARMAView</scope><name>mChannels</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a420b5083584d78e4bb7f5db8b3e62bc3" prot="private" virt="non-virtual"><scope>tsa::ARMAView</scope><name>mMA</name></member>
      <member refid="classtsa_1_1_base_view_1a91429dee1249c140160bfca20e783019" prot="protected" virt="non-virtual"><scope>tsa::ARMAView</scope><name>mName</name></member>
      <member refid="classtsa_1_1_base_view_1a29e213aae81ad55e146a5e41ad5a1ce9" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>operator=</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a9fdd9c921d39b10a4d83379f69bdb160" prot="private" virt="non-virtual"><scope>tsa::ARMAView</scope><name>ResizeAR</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a757cddd07c0bb5bf0c4a8784e79f5900" prot="private" virt="non-virtual"><scope>tsa::ARMAView</scope><name>ResizeMA</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a022ef32e6b0c2012707317cf1fbf9a54" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>Save</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1ae1b0323b27d5c8ad4a9e43a0119c407a" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>SetAR</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a14f528f407a13473a7c20a0d7dec6482" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>SetChannels</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a0fb548001ea80ac198ecf5619090320e" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>SetMA</name></member>
      <member refid="classtsa_1_1_base_view_1abcfce2c227a5826093e7cb86a02765f9" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>SetName</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a192fe1e105780bc26cae74f51bc54597" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>SetOrder</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a75a22d6966763cdba5788303a3fe3e7a" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>SetVAR</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a3cebaae08e5718c57fb234c414904bc6" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>SetVMA</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1ac667fd050280837056f3397fdb21afe6" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>xml_serialize</name></member>
      <member refid="classtsa_1_1_a_r_m_a_view_1a44779ce53323f8e6a1457974e9242004" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>~ARMAView</name></member>
      <member refid="classtsa_1_1_base_view_1ad3e2d3032a8efe2bd2dc7a9a9c7636d6" prot="public" virt="non-virtual"><scope>tsa::ARMAView</scope><name>~BaseView</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

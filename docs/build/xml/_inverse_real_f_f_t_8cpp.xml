<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_inverse_real_f_f_t_8cpp" kind="file" language="C++">
    <compoundname>InverseRealFFT.cpp</compoundname>
    <includes refid="_inverse_real_f_f_t_8hpp" local="no">InverseRealFFT.hpp</includes>
    <incdepgraph>
      <node id="5617">
        <label>tsaTraits.hpp</label>
        <link refid="tsa_traits_8hpp"/>
        <childnode refid="5618" relation="include">
        </childnode>
      </node>
      <node id="5598">
        <label>eternity.hpp</label>
        <link refid="eternity_8hpp"/>
        <childnode refid="5599" relation="include">
        </childnode>
        <childnode refid="5601" relation="include">
        </childnode>
        <childnode refid="5606" relation="include">
        </childnode>
        <childnode refid="5610" relation="include">
        </childnode>
      </node>
      <node id="5603">
        <label>stdlib.h</label>
      </node>
      <node id="5592">
        <label>stdexcept</label>
      </node>
      <node id="5612">
        <label>tsaTypes.hpp</label>
        <link refid="tsa_types_8hpp"/>
        <childnode refid="5594" relation="include">
        </childnode>
        <childnode refid="5589" relation="include">
        </childnode>
        <childnode refid="5613" relation="include">
        </childnode>
        <childnode refid="5595" relation="include">
        </childnode>
        <childnode refid="5598" relation="include">
        </childnode>
      </node>
      <node id="5596">
        <label>string</label>
      </node>
      <node id="5599">
        <label>eternity/dynamic.hpp</label>
        <link refid="dynamic_8hpp"/>
        <childnode refid="5588" relation="include">
        </childnode>
        <childnode refid="5600" relation="include">
        </childnode>
        <childnode refid="5596" relation="include">
        </childnode>
      </node>
      <node id="5608">
        <label>map</label>
      </node>
      <node id="5614">
        <label>tsaLog.hpp</label>
        <link refid="tsa_log_8hpp"/>
        <childnode refid="5593" relation="include">
        </childnode>
        <childnode refid="5594" relation="include">
        </childnode>
        <childnode refid="5615" relation="include">
        </childnode>
      </node>
      <node id="5590">
        <label>fftw3.h</label>
      </node>
      <node id="5594">
        <label>fstream</label>
      </node>
      <node id="5607">
        <label>xmlscanner.hpp</label>
        <link refid="xmlscanner_8hpp"/>
        <childnode refid="5602" relation="include">
        </childnode>
        <childnode refid="5603" relation="include">
        </childnode>
        <childnode refid="5604" relation="include">
        </childnode>
        <childnode refid="5608" relation="include">
        </childnode>
        <childnode refid="5605" relation="include">
        </childnode>
        <childnode refid="5594" relation="include">
        </childnode>
        <childnode refid="5596" relation="include">
        </childnode>
        <childnode refid="5593" relation="include">
        </childnode>
      </node>
      <node id="5597">
        <label>tsaSerialize.hpp</label>
        <link refid="tsa_serialize_8hpp"/>
        <childnode refid="5592" relation="include">
        </childnode>
        <childnode refid="5593" relation="include">
        </childnode>
        <childnode refid="5594" relation="include">
        </childnode>
        <childnode refid="5598" relation="include">
        </childnode>
        <childnode refid="5612" relation="include">
        </childnode>
      </node>
      <node id="5586">
        <label>InverseRealFFT.hpp</label>
        <link refid="_inverse_real_f_f_t_8hpp"/>
        <childnode refid="5587" relation="include">
        </childnode>
      </node>
      <node id="5585">
        <label>/home/filip/PhD/WDFPipe_test/p4TSA/src/InverseRealFFT.cpp</label>
        <link refid="_inverse_real_f_f_t_8cpp"/>
        <childnode refid="5586" relation="include">
        </childnode>
      </node>
      <node id="5621">
        <label>fparser.hpp</label>
        <link refid="fparser_8hpp"/>
        <childnode refid="5596" relation="include">
        </childnode>
        <childnode refid="5608" relation="include">
        </childnode>
        <childnode refid="5604" relation="include">
        </childnode>
      </node>
      <node id="5591">
        <label>AlgoBase.hpp</label>
        <link refid="_algo_base_8hpp"/>
        <childnode refid="5592" relation="include">
        </childnode>
        <childnode refid="5593" relation="include">
        </childnode>
        <childnode refid="5594" relation="include">
        </childnode>
        <childnode refid="5589" relation="include">
        </childnode>
        <childnode refid="5595" relation="include">
        </childnode>
        <childnode refid="5596" relation="include">
        </childnode>
        <childnode refid="5597" relation="include">
        </childnode>
        <childnode refid="5612" relation="include">
        </childnode>
        <childnode refid="5614" relation="include">
        </childnode>
        <childnode refid="5616" relation="include">
        </childnode>
        <childnode refid="5622" relation="include">
        </childnode>
        <childnode refid="5624" relation="include">
        </childnode>
      </node>
      <node id="5601">
        <label>eternity/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="5599" relation="include">
        </childnode>
        <childnode refid="5602" relation="include">
        </childnode>
        <childnode refid="5603" relation="include">
        </childnode>
        <childnode refid="5604" relation="include">
        </childnode>
        <childnode refid="5605" relation="include">
        </childnode>
        <childnode refid="5594" relation="include">
        </childnode>
      </node>
      <node id="5620">
        <label>string.h</label>
      </node>
      <node id="5600">
        <label>typeinfo</label>
      </node>
      <node id="5595">
        <label>boost/numeric/ublas/io.hpp</label>
      </node>
      <node id="5615">
        <label>unistd.h</label>
      </node>
      <node id="5619">
        <label>tsaUtilityFunctions.hpp</label>
        <link refid="tsa_utility_functions_8hpp"/>
        <childnode refid="5620" relation="include">
        </childnode>
        <childnode refid="5621" relation="include">
        </childnode>
        <childnode refid="5618" relation="include">
        </childnode>
        <childnode refid="5594" relation="include">
        </childnode>
      </node>
      <node id="5604">
        <label>vector</label>
      </node>
      <node id="5616">
        <label>BaseView.hpp</label>
        <link refid="_base_view_8hpp"/>
        <childnode refid="5608" relation="include">
        </childnode>
        <childnode refid="5596" relation="include">
        </childnode>
        <childnode refid="5612" relation="include">
        </childnode>
        <childnode refid="5617" relation="include">
        </childnode>
        <childnode refid="5619" relation="include">
        </childnode>
        <childnode refid="5597" relation="include">
        </childnode>
        <childnode refid="5614" relation="include">
        </childnode>
      </node>
      <node id="5613">
        <label>boost/numeric/ublas/matrix_proxy.hpp</label>
      </node>
      <node id="5611">
        <label>sstream</label>
      </node>
      <node id="5623">
        <label>FrameL.h</label>
      </node>
      <node id="5624">
        <label>AlgoExceptions.hpp</label>
        <link refid="_algo_exceptions_8hpp"/>
        <childnode refid="5592" relation="include">
        </childnode>
        <childnode refid="5596" relation="include">
        </childnode>
      </node>
      <node id="5622">
        <label>SeqView.hpp</label>
        <link refid="_seq_view_8hpp"/>
        <childnode refid="5589" relation="include">
        </childnode>
        <childnode refid="5613" relation="include">
        </childnode>
        <childnode refid="5595" relation="include">
        </childnode>
        <childnode refid="5616" relation="include">
        </childnode>
        <childnode refid="5623" relation="include">
        </childnode>
      </node>
      <node id="5602">
        <label>math.h</label>
      </node>
      <node id="5589">
        <label>boost/numeric/ublas/matrix.hpp</label>
      </node>
      <node id="5593">
        <label>iostream</label>
      </node>
      <node id="5609">
        <label>deque</label>
      </node>
      <node id="5587">
        <label>BaseFFT.hpp</label>
        <link refid="_base_f_f_t_8hpp"/>
        <childnode refid="5588" relation="include">
        </childnode>
        <childnode refid="5589" relation="include">
        </childnode>
        <childnode refid="5590" relation="include">
        </childnode>
        <childnode refid="5591" relation="include">
        </childnode>
      </node>
      <node id="5606">
        <label>eternity/persist_xml.hpp</label>
        <link refid="persist__xml_8hpp"/>
        <childnode refid="5601" relation="include">
        </childnode>
        <childnode refid="5607" relation="include">
        </childnode>
        <childnode refid="5609" relation="include">
        </childnode>
      </node>
      <node id="5618">
        <label>complex</label>
      </node>
      <node id="5610">
        <label>eternity/algorithms.hpp</label>
        <link refid="algorithms_8hpp"/>
        <childnode refid="5601" relation="include">
        </childnode>
        <childnode refid="5606" relation="include">
        </childnode>
        <childnode refid="5607" relation="include">
        </childnode>
        <childnode refid="5611" relation="include">
        </childnode>
      </node>
      <node id="5605">
        <label>algorithm</label>
      </node>
      <node id="5588">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetsa">tsa</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_inverse_real_f_f_t_8hpp" kindref="compound">InverseRealFFT.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetsa" kindref="compound">tsa</ref><sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="classtsa_1_1_inverse_real_f_f_t_1a50258b4d4596d93935791135cd22feb9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_inverse_real_f_f_t_1a50258b4d4596d93935791135cd22feb9" kindref="member">InverseRealFFT::InverseRealFFT</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="namespacetsa_1a217e07ef78939f88b22c8428ac96b1ae" kindref="member">FFTPlanningMode</ref><sp/>mode,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PreserveInput)</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_base_f_f_t" kindref="compound">BaseFFT</ref>(size,<sp/>mode,<sp/>PreserveInput)<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="classtsa_1_1_inverse_real_f_f_t_1a5a9e17eaf4fd69e719dca4b881010876" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_inverse_real_f_f_t_1a50258b4d4596d93935791135cd22feb9" kindref="member">InverseRealFFT::InverseRealFFT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtsa_1_1_inverse_real_f_f_t" kindref="compound">InverseRealFFT</ref>&amp;<sp/>from)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_base_f_f_t" kindref="compound">BaseFFT</ref>(from)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="classtsa_1_1_inverse_real_f_f_t_1a928e08fb19e46a901e0dc42ec5970801" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_inverse_real_f_f_t_1a928e08fb19e46a901e0dc42ec5970801" kindref="member">InverseRealFFT::~InverseRealFFT</ref>()<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="classtsa_1_1_inverse_real_f_f_t_1ac37c11d801f396360818a54dddf1c9d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtsa_1_1_inverse_real_f_f_t_1ac37c11d801f396360818a54dddf1c9d1" kindref="member">InverseRealFFT::execute</ref>(<ref refid="namespacetsa_1a86348fef1603a135fe5fba9e5f5486ee" kindref="member">Cmatrix</ref>&amp;<sp/>indata,<sp/><ref refid="namespacetsa_1ad260cd21c1891c4ed391fe788569aba4" kindref="member">Dmatrix</ref>&amp;<sp/>outdata)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(<ref refid="classtsa_1_1bad__matrix__size" kindref="compound">bad_matrix_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((indata.size1()<sp/>!=<sp/>outdata.size1())<sp/>||<sp/>(outdata.size2()<sp/>/<sp/>2<sp/>+<sp/>1<sp/>!=<sp/>indata.size2()))<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classtsa_1_1bad__matrix__size" kindref="compound">bad_matrix_size</ref>(</highlight><highlight class="stringliteral">&quot;InverseRealFFT::execute&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outdata.size2()<sp/>!=<sp/><ref refid="classtsa_1_1_base_f_f_t_1a171c71011fea314f23633b1816771d98" kindref="member">mLogicalSize</ref>)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_base_f_f_t_1aa89fef1777c6df148cdb8533265b6163" kindref="member">mPlanNeedsUpdate</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtsa_1_1_base_f_f_t_1aa89fef1777c6df148cdb8533265b6163" kindref="member">mPlanNeedsUpdate</ref>)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_base_f_f_t_1a171c71011fea314f23633b1816771d98" kindref="member">mLogicalSize</ref><sp/>=<sp/>outdata.size2();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_inverse_real_f_f_t_1ae5b45701f989efce89c6c336ec78c189" kindref="member">MakePlan</ref>();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>isize1<sp/>=<sp/>indata.size1();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>isize1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fftw_execute_dft_c2r(</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_base_f_f_t_1a5c7dd6dee349547018d493be6d5874eb" kindref="member">mPlan</ref>,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fftw_complex*)<sp/>&amp;<sp/>indata(i,<sp/>0),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>&amp;outdata(i,<sp/>0)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="classtsa_1_1_inverse_real_f_f_t_1a619333f55b1526e03169c9c8be29d442" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtsa_1_1_inverse_real_f_f_t_1a619333f55b1526e03169c9c8be29d442" kindref="member">InverseRealFFT::operator()</ref>(<ref refid="namespacetsa_1ab32775c889b53c40fa83939f22372b75" kindref="member">SeqViewComplex</ref>&amp;<sp/>in,<sp/><ref refid="namespacetsa_1ac599574bcc094eda25613724b8f3ca9e" kindref="member">SeqViewDouble</ref>&amp;<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetsa_1a86348fef1603a135fe5fba9e5f5486ee" kindref="member">Cmatrix</ref>*<sp/>data_in<sp/>=<sp/>in.GetData();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetsa_1ad260cd21c1891c4ed391fe788569aba4" kindref="member">Dmatrix</ref>*<sp/>data_out<sp/>=<sp/>out.GetData();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>dimensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((data_in-&gt;size1()<sp/>!=<sp/>data_out-&gt;size1())<sp/>||<sp/>(data_out-&gt;size2()<sp/>/<sp/>2<sp/>+<sp/>1<sp/>!=<sp/>data_in-&gt;size2()))<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetsa_1a91d266348bcf69ab00c97a253b0ec790" kindref="member">LogWarning</ref>(</highlight><highlight class="stringliteral">&quot;InverseRealFFT:<sp/>resizing<sp/>output<sp/>array<sp/>(%d,%d)-&gt;(%d,%d)&quot;</highlight><highlight class="normal">,<sp/>data_out-&gt;size1(),<sp/>data_out-&gt;size2(),<sp/>data_in-&gt;size1(),<sp/>2<sp/>*<sp/>(data_in-&gt;size2()<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_out-&gt;resize(data_in-&gt;size1(),<sp/>2<sp/>*<sp/>(data_in-&gt;size2()<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_inverse_real_f_f_t_1ac37c11d801f396360818a54dddf1c9d1" kindref="member">execute</ref>(*data_in,<sp/>*data_out);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.SetStart(0.0);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.SetSampling(1.0<sp/>/<sp/>in.GetSlice());</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.SetScale(in.GetScale()<sp/>*<sp/>in.GetSampling());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classtsa_1_1_inverse_real_f_f_t_1a2693642ff2282921710456dea0915b40" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtsa_1_1_inverse_real_f_f_t_1ac37c11d801f396360818a54dddf1c9d1" kindref="member">InverseRealFFT::execute</ref>(<ref refid="namespacetsa_1a054d1045ead95a65819e9e5722baf600" kindref="member">Cvector</ref>&amp;<sp/>indata,<sp/><ref refid="namespacetsa_1a8900fb03d849baf447a1a0efe2561fb2" kindref="member">Dvector</ref>&amp;<sp/>outdata)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(<ref refid="classtsa_1_1bad__vector__size" kindref="compound">bad_vector_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((indata.size()<sp/>!=<sp/>outdata.size()<sp/>/<sp/>2<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classtsa_1_1bad__vector__size" kindref="compound">bad_vector_size</ref>(</highlight><highlight class="stringliteral">&quot;InverseRealFFT::execute&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outdata.size()<sp/>!=<sp/><ref refid="classtsa_1_1_base_f_f_t_1a171c71011fea314f23633b1816771d98" kindref="member">mLogicalSize</ref>)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_base_f_f_t_1aa89fef1777c6df148cdb8533265b6163" kindref="member">mPlanNeedsUpdate</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtsa_1_1_base_f_f_t_1aa89fef1777c6df148cdb8533265b6163" kindref="member">mPlanNeedsUpdate</ref>)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_base_f_f_t_1a171c71011fea314f23633b1816771d98" kindref="member">mLogicalSize</ref><sp/>=<sp/>outdata.size();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_inverse_real_f_f_t_1ae5b45701f989efce89c6c336ec78c189" kindref="member">MakePlan</ref>();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fftw_execute_dft_c2r(</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_base_f_f_t_1a5c7dd6dee349547018d493be6d5874eb" kindref="member">mPlan</ref>,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fftw_complex*)<sp/>&amp;<sp/>indata(0),</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>&amp;outdata(0)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="classtsa_1_1_inverse_real_f_f_t_1aaa4b1dd80a308eb09a9dc9fe1aeba51e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtsa_1_1_inverse_real_f_f_t_1ac37c11d801f396360818a54dddf1c9d1" kindref="member">InverseRealFFT::execute</ref>(<ref refid="namespacetsa_1ad294f56c16152a1618cbe2f19b768e2e" kindref="member">CmatrixRow</ref>&amp;<sp/>indata,<sp/><ref refid="namespacetsa_1aeaf3be962a114beef3d9e89b0fb49bf4" kindref="member">DmatrixRow</ref>&amp;<sp/>outdata)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(<ref refid="classtsa_1_1bad__vector__size" kindref="compound">bad_vector_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((indata.size()<sp/>!=<sp/>outdata.size()<sp/>/<sp/>2<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classtsa_1_1bad__vector__size" kindref="compound">bad_vector_size</ref>(</highlight><highlight class="stringliteral">&quot;InverseRealFFT::execute&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outdata.size()<sp/>!=<sp/><ref refid="classtsa_1_1_base_f_f_t_1a171c71011fea314f23633b1816771d98" kindref="member">mLogicalSize</ref>)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_base_f_f_t_1aa89fef1777c6df148cdb8533265b6163" kindref="member">mPlanNeedsUpdate</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtsa_1_1_base_f_f_t_1aa89fef1777c6df148cdb8533265b6163" kindref="member">mPlanNeedsUpdate</ref>)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_base_f_f_t_1a171c71011fea314f23633b1816771d98" kindref="member">mLogicalSize</ref><sp/>=<sp/>outdata.size();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_inverse_real_f_f_t_1ae5b45701f989efce89c6c336ec78c189" kindref="member">MakePlan</ref>();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fftw_execute_dft_c2r(</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_base_f_f_t_1a5c7dd6dee349547018d493be6d5874eb" kindref="member">mPlan</ref>,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fftw_complex*)<sp/>&amp;<sp/>indata(0),</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>&amp;outdata(0)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="classtsa_1_1_inverse_real_f_f_t_1a6264c0d0b0b4a31e584a390b06281631" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtsa_1_1_inverse_real_f_f_t_1ac37c11d801f396360818a54dddf1c9d1" kindref="member">InverseRealFFT::execute</ref>(<ref refid="namespacetsa_1ad294f56c16152a1618cbe2f19b768e2e" kindref="member">CmatrixRow</ref>&amp;<sp/>indata,<sp/><ref refid="namespacetsa_1aeaf3be962a114beef3d9e89b0fb49bf4" kindref="member">DmatrixRow</ref>&amp;<sp/>outdata,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>insize)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(<ref refid="classtsa_1_1bad__vector__size" kindref="compound">bad_vector_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(insize<sp/>&gt;<sp/>indata.size())<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classtsa_1_1bad__vector__size" kindref="compound">bad_vector_size</ref>(</highlight><highlight class="stringliteral">&quot;InverseRealFFT::execute&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((insize<sp/>!=<sp/>outdata.size()<sp/>/<sp/>2<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classtsa_1_1bad__vector__size" kindref="compound">bad_vector_size</ref>(</highlight><highlight class="stringliteral">&quot;InverseRealFFT::execute&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outdata.size()<sp/>!=<sp/><ref refid="classtsa_1_1_base_f_f_t_1a171c71011fea314f23633b1816771d98" kindref="member">mLogicalSize</ref>)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_base_f_f_t_1aa89fef1777c6df148cdb8533265b6163" kindref="member">mPlanNeedsUpdate</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtsa_1_1_base_f_f_t_1aa89fef1777c6df148cdb8533265b6163" kindref="member">mPlanNeedsUpdate</ref>)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_base_f_f_t_1a171c71011fea314f23633b1816771d98" kindref="member">mLogicalSize</ref><sp/>=<sp/>outdata.size();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_inverse_real_f_f_t_1ae5b45701f989efce89c6c336ec78c189" kindref="member">MakePlan</ref>();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fftw_execute_dft_c2r(</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_base_f_f_t_1a5c7dd6dee349547018d493be6d5874eb" kindref="member">mPlan</ref>,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fftw_complex*)<sp/>&amp;<sp/>indata(0),</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>&amp;outdata(0)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="classtsa_1_1_inverse_real_f_f_t_1ae5b45701f989efce89c6c336ec78c189" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtsa_1_1_inverse_real_f_f_t_1ae5b45701f989efce89c6c336ec78c189" kindref="member">InverseRealFFT::MakePlan</ref>()<sp/>throw<sp/>(<ref refid="namespacestd" kindref="compound">std</ref>::runtime_error)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtsa_1_1_base_f_f_t_1a5c7dd6dee349547018d493be6d5874eb" kindref="member">mPlan</ref>)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fftw_destroy_plan(<ref refid="classtsa_1_1_base_f_f_t_1a5c7dd6dee349547018d493be6d5874eb" kindref="member">mPlan</ref>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fftw_complex<sp/>*in<sp/>=<sp/>(fftw_complex*)<sp/>fftw_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(fftw_complex)*(<ref refid="classtsa_1_1_base_f_f_t_1a171c71011fea314f23633b1816771d98" kindref="member">mLogicalSize</ref><sp/>/<sp/>2<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*out<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>fftw_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)*<ref refid="classtsa_1_1_base_f_f_t_1a171c71011fea314f23633b1816771d98" kindref="member">mLogicalSize</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_base_f_f_t_1a5c7dd6dee349547018d493be6d5874eb" kindref="member">mPlan</ref><sp/>=<sp/>fftw_plan_dft_c2r_1d(<ref refid="classtsa_1_1_base_f_f_t_1a171c71011fea314f23633b1816771d98" kindref="member">mLogicalSize</ref>,<sp/>in,<sp/>out,<sp/>FFTW_UNALIGNED<sp/>|<sp/><ref refid="classtsa_1_1_base_f_f_t_1abbd656cda5a7cb6a88fc5d556d3269f7" kindref="member">mPlanningRigor</ref><sp/>|<sp/><ref refid="classtsa_1_1_base_f_f_t_1a2fe7f53db024bb408beeb5e22eaefbb9" kindref="member">mPlanningRestriction</ref>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtsa_1_1_base_f_f_t_1a5c7dd6dee349547018d493be6d5874eb" kindref="member">mPlan</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;InverseRealFFT::MakePlan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fftw_free(in);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fftw_free(out);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtsa_1_1_base_f_f_t_1aa89fef1777c6df148cdb8533265b6163" kindref="member">mPlanNeedsUpdate</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>--<sp/>end<sp/>namespace<sp/>tsa</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/filip/PhD/WDFPipe_test/p4TSA/src/InverseRealFFT.cpp"/>
  </compounddef>
</doxygen>

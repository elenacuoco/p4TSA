<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classeternity_1_1file__archive" kind="class" language="C++" prot="public">
    <compoundname>eternity::file_archive</compoundname>
    <basecompoundref refid="classeternity_1_1bin__archive" prot="public" virt="non-virtual">eternity::bin_archive</basecompoundref>
    <includes refid="persist_8hpp" local="no">persist.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classeternity_1_1file__archive_1ac702d57d9633f8695476da8a7d55dd9d" prot="private" static="no" mutable="no">
        <type>std::fstream</type>
        <definition>std::fstream eternity::file_archive::stream</definition>
        <argsstring></argsstring>
        <name>stream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.hpp" line="194" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.hpp" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classeternity_1_1file__archive_1ab2a892aad41300e922115115b76b7754" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>eternity::file_archive::file_archive</definition>
        <argsstring>()</argsstring>
        <name>file_archive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.hpp" line="197" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.hpp" bodystart="197" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classeternity_1_1file__archive_1a6f7dd96ce65d0be588f31286313a4b5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eternity::file_archive::file_archive</definition>
        <argsstring>(std::string file_name, opening_mode mode)</argsstring>
        <name>file_archive</name>
        <param>
          <type>std::string</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type><ref refid="classeternity_1_1archive_1a8881f9ce8dbed2ee600c64b7925afef0" kindref="member">opening_mode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.hpp" line="201" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.cpp" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classeternity_1_1file__archive_1a122b37e9949cd1a2f6279ed23d01d97f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>eternity::file_archive::~file_archive</definition>
        <argsstring>()</argsstring>
        <name>~file_archive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.hpp" line="203" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.hpp" bodystart="203" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classeternity_1_1file__archive_1aa42b3bfaf4e595f61ec07bec48676d46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eternity::file_archive::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
<para>close the archive file and release memory used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.hpp" line="209" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.hpp" bodystart="209" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classeternity_1_1file__archive_1a64a17edf2cea4f1582a5a3c44eb86fa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eternity::file_archive::open</definition>
        <argsstring>(std::string file_name, opening_mode mode)</argsstring>
        <name>open</name>
        <param>
          <type>std::string</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type><ref refid="classeternity_1_1archive_1a8881f9ce8dbed2ee600c64b7925afef0" kindref="member">opening_mode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initialize the <ref refid="classeternity_1_1file__archive" kindref="compound">file_archive</ref> using the file named file_name. If mode is load create the file. Anyway init update archive to begin persistence operations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.hpp" line="223" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.cpp" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classeternity_1_1file__archive_1a5f97e0b816c5d9406f675b25f34c21f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eternity::file_archive::open</definition>
        <argsstring>(std::string sName, bool loading=true)</argsstring>
        <name>open</name>
        <param>
          <type>std::string</type>
          <declname>sName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>loading</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>open the archive file and update this for the serialization </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.hpp" line="226" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.cpp" bodystart="105" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classeternity_1_1file__archive_1a0eaf4b5937b3ff46df3627f64efc19e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t eternity::file_archive::write</definition>
        <argsstring>(const void *buffer, size_t size, size_t count)</argsstring>
        <name>write</name>
        <reimplements refid="classeternity_1_1bin__archive_1acbe041b0815f2721ee18ad042557b14e">write</reimplements>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>write a buffer of a certain legnth n time in the archive </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.hpp" line="228" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.cpp" bodystart="77" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classeternity_1_1file__archive_1a307b43ac9f06c7077ac0f7e48dc0d7ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t eternity::file_archive::read</definition>
        <argsstring>(void *buffer, size_t size, size_t count)</argsstring>
        <name>read</name>
        <reimplements refid="classeternity_1_1bin__archive_1a5d67b032541f5a1e104d2fcd0eaa7a55">read</reimplements>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>read a buffer of a certain legnth n time in the archive </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.hpp" line="230" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.cpp" bodystart="86" bodyend="92"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Realize an binary archive using the common file like stream. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="242">
        <label>eternity::bin_archive</label>
        <link refid="classeternity_1_1bin__archive"/>
        <childnode refid="243" relation="public-inheritance">
        </childnode>
      </node>
      <node id="241">
        <label>eternity::file_archive</label>
        <link refid="classeternity_1_1file__archive"/>
        <childnode refid="242" relation="public-inheritance">
        </childnode>
      </node>
      <node id="243">
        <label>eternity::archive</label>
        <link refid="classeternity_1_1archive"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="245">
        <label>eternity::bin_archive</label>
        <link refid="classeternity_1_1bin__archive"/>
        <childnode refid="246" relation="public-inheritance">
        </childnode>
      </node>
      <node id="244">
        <label>eternity::file_archive</label>
        <link refid="classeternity_1_1file__archive"/>
        <childnode refid="245" relation="public-inheritance">
        </childnode>
      </node>
      <node id="246">
        <label>eternity::archive</label>
        <link refid="classeternity_1_1archive"/>
      </node>
    </collaborationgraph>
    <location file="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.hpp" line="193" column="1" bodyfile="/home/filip/PhD/WDFPipe_test/p4TSA/include/eternity/persist.hpp" bodystart="193" bodyend="231"/>
    <listofallmembers>
      <member refid="classeternity_1_1archive_1adc5356f74fed2dd5daf230aa1ee6c58e" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>archive</name></member>
      <member refid="classeternity_1_1file__archive_1aa42b3bfaf4e595f61ec07bec48676d46" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>close</name></member>
      <member refid="classeternity_1_1file__archive_1ab2a892aad41300e922115115b76b7754" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>file_archive</name></member>
      <member refid="classeternity_1_1file__archive_1a6f7dd96ce65d0be588f31286313a4b5a" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>file_archive</name></member>
      <member refid="classeternity_1_1bin__archive_1a4c9b0ab9146c3a9ccaa5ec745299b282" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>get_object</name></member>
      <member refid="classeternity_1_1archive_1a941c3b590afc929089706b92ce4d5e13" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>init</name></member>
      <member refid="classeternity_1_1archive_1af1ced5c2f5cd028d88033c40ac98cc71" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>is_loading</name></member>
      <member refid="classeternity_1_1archive_1afbd7e1d21409eae43622049624277405" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>is_storing</name></member>
      <member refid="classeternity_1_1archive_1a8881f9ce8dbed2ee600c64b7925afef0a5b952c27ebe4ca2612e939a1aa19baf5" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>load</name></member>
      <member refid="classeternity_1_1archive_1a949b798deac030f2ab45ed54bf26dc4a" prot="protected" virt="non-virtual"><scope>eternity::file_archive</scope><name>m_bloading</name></member>
      <member refid="classeternity_1_1archive_1ae4a796ad260a0f581cf33be4f072d83a" prot="protected" virt="non-virtual"><scope>eternity::file_archive</scope><name>m_vPointerstored</name></member>
      <member refid="classeternity_1_1file__archive_1a64a17edf2cea4f1582a5a3c44eb86fa4" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>open</name></member>
      <member refid="classeternity_1_1file__archive_1a5f97e0b816c5d9406f675b25f34c21f8" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>open</name></member>
      <member refid="classeternity_1_1archive_1a8881f9ce8dbed2ee600c64b7925afef0" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>opening_mode</name></member>
      <member refid="classeternity_1_1bin__archive_1a451f9bd713b83922890014af88d386e6" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>operator&lt;&lt;</name></member>
      <member refid="classeternity_1_1bin__archive_1a5cc61f7f70b1d809fbece79ccb9ecb26" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>operator&lt;&lt;</name></member>
      <member refid="classeternity_1_1bin__archive_1a8c431d394555d953019fe1f35ca77ffd" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>operator&gt;&gt;</name></member>
      <member refid="classeternity_1_1bin__archive_1a4cbbd8dff6b78cf3868a49b30261dd26" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>operator&gt;&gt;</name></member>
      <member refid="classeternity_1_1bin__archive_1ab93c74313a8c6afdc65d4f2f2860502c" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>put_object</name></member>
      <member refid="classeternity_1_1archive_1a2c4ab8d0935b130b38bce44f600bee99" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>put_pointer</name></member>
      <member refid="classeternity_1_1file__archive_1a307b43ac9f06c7077ac0f7e48dc0d7ab" prot="public" virt="virtual"><scope>eternity::file_archive</scope><name>read</name></member>
      <member refid="classeternity_1_1archive_1a759dd5567021290542de13d090aa0963" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>set_loading</name></member>
      <member refid="classeternity_1_1archive_1a8881f9ce8dbed2ee600c64b7925afef0a06c18c297779389cb1cb03a2a7590ca8" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>store</name></member>
      <member refid="classeternity_1_1file__archive_1ac702d57d9633f8695476da8a7d55dd9d" prot="private" virt="non-virtual"><scope>eternity::file_archive</scope><name>stream</name></member>
      <member refid="classeternity_1_1file__archive_1a0eaf4b5937b3ff46df3627f64efc19e8" prot="public" virt="virtual"><scope>eternity::file_archive</scope><name>write</name></member>
      <member refid="classeternity_1_1bin__archive_1a0cc44edd050d598ff4f617e445159386" prot="public" virt="virtual"><scope>eternity::file_archive</scope><name>~bin_archive</name></member>
      <member refid="classeternity_1_1file__archive_1a122b37e9949cd1a2f6279ed23d01d97f" prot="public" virt="non-virtual"><scope>eternity::file_archive</scope><name>~file_archive</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
